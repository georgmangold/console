{"version":3,"file":"static/js/1303.71dd1e01.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/AddBucketTagModal.tsx","screens/Console/Common/ModalWrapper/ModalWrapper.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport { AddNewTagIcon, Box, Button, FormLayout, Grid, InputBox } from \"mds\";\nimport { modalStyleUtils } from \"../../Common/FormComponents/common/styleLibrary\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\nimport { setModalErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\n\ninterface IBucketTagModal {\n  modalOpen: boolean;\n  currentTags: any;\n  bucketName: string;\n  onCloseAndUpdate: (refresh: boolean) => void;\n}\n\nconst AddBucketTagModal = ({\n  modalOpen,\n  currentTags,\n  onCloseAndUpdate,\n  bucketName,\n}: IBucketTagModal) => {\n  const dispatch = useAppDispatch();\n  const [newKey, setNewKey] = useState<string>(\"\");\n  const [newLabel, setNewLabel] = useState<string>(\"\");\n  const [isSending, setIsSending] = useState<boolean>(false);\n\n  const resetForm = () => {\n    setNewLabel(\"\");\n    setNewKey(\"\");\n  };\n\n  const addTagProcess = () => {\n    setIsSending(true);\n    const newTag: any = {};\n\n    newTag[newKey] = newLabel;\n    const newTagList = { ...currentTags, ...newTag };\n\n    api.buckets\n      .putBucketTags(bucketName, {\n        tags: newTagList,\n      })\n      .then(() => {\n        setIsSending(false);\n        onCloseAndUpdate(true);\n      })\n      .catch((error) => {\n        dispatch(setModalErrorSnackMessage(errorToHandler(error.error)));\n        setIsSending(false);\n      });\n  };\n\n  return (\n    <ModalWrapper\n      modalOpen={modalOpen}\n      title={`Add New Tag `}\n      onClose={() => {\n        onCloseAndUpdate(false);\n      }}\n      titleIcon={<AddNewTagIcon />}\n    >\n      <FormLayout withBorders={false} containerPadding={false}>\n        <Box sx={{ marginBottom: 15 }}>\n          <strong>Bucket</strong>: {bucketName}\n        </Box>\n        <InputBox\n          value={newKey}\n          label={\"New Tag Key\"}\n          id={\"newTagKey\"}\n          name={\"newTagKey\"}\n          placeholder={\"Enter New Tag Key\"}\n          onChange={(e: any) => {\n            setNewKey(e.target.value);\n          }}\n        />\n        <InputBox\n          value={newLabel}\n          label={\"New Tag Label\"}\n          id={\"newTagLabel\"}\n          name={\"newTagLabel\"}\n          placeholder={\"Enter New Tag Label\"}\n          onChange={(e: any) => {\n            setNewLabel(e.target.value);\n          }}\n        />\n        <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n          <Button\n            id={\"clear\"}\n            type=\"button\"\n            variant=\"regular\"\n            onClick={resetForm}\n            label={\"Clear\"}\n          />\n          <Button\n            id={\"save-add-bucket-tag\"}\n            type=\"submit\"\n            variant=\"callAction\"\n            color=\"primary\"\n            disabled={\n              newLabel.trim() === \"\" || newKey.trim() === \"\" || isSending\n            }\n            onClick={addTagProcess}\n            label={\"Save\"}\n          />\n        </Grid>\n      </FormLayout>\n    </ModalWrapper>\n  );\n};\n\nexport default AddBucketTagModal;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ModalBox, Snackbar } from \"mds\";\nimport { CSSObject } from \"styled-components\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport { setModalSnackMessage } from \"../../../../systemSlice\";\nimport MainError from \"../MainError/MainError\";\n\ninterface IModalProps {\n  onClose: () => void;\n  modalOpen: boolean;\n  title: string | React.ReactNode;\n  children: any;\n  wideLimit?: boolean;\n  titleIcon?: React.ReactNode;\n  iconColor?: \"default\" | \"delete\" | \"accept\";\n  sx?: CSSObject;\n}\n\nconst ModalWrapper = ({\n  onClose,\n  modalOpen,\n  title,\n  children,\n  wideLimit = true,\n  titleIcon = null,\n  iconColor = \"default\",\n  sx,\n}: IModalProps) => {\n  const dispatch = useAppDispatch();\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\n\n  const modalSnackMessage = useSelector(\n    (state: AppState) => state.system.modalSnackBar,\n  );\n\n  useEffect(() => {\n    dispatch(setModalSnackMessage(\"\"));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (modalSnackMessage) {\n      if (modalSnackMessage.message === \"\") {\n        setOpenSnackbar(false);\n        return;\n      }\n      // Open SnackBar\n      if (modalSnackMessage.type !== \"error\") {\n        setOpenSnackbar(true);\n      }\n    }\n  }, [modalSnackMessage]);\n\n  const closeSnackBar = () => {\n    setOpenSnackbar(false);\n    dispatch(setModalSnackMessage(\"\"));\n  };\n\n  let message = \"\";\n\n  if (modalSnackMessage) {\n    message = modalSnackMessage.detailedErrorMsg;\n    if (message === \"\" || (message && message.length < 5)) {\n      message = modalSnackMessage.message;\n    }\n  }\n\n  return (\n    <ModalBox\n      onClose={onClose}\n      open={modalOpen}\n      title={title}\n      titleIcon={titleIcon}\n      widthLimit={wideLimit}\n      sx={sx}\n      iconColor={iconColor}\n    >\n      <MainError isModal={true} />\n      <Snackbar\n        onClose={closeSnackBar}\n        open={openSnackbar}\n        message={message}\n        mode={\"inline\"}\n        variant={modalSnackMessage.type === \"error\" ? \"error\" : \"default\"}\n        autoHideDuration={modalSnackMessage.type === \"error\" ? 10 : 5}\n        condensed\n      />\n      {children}\n    </ModalBox>\n  );\n};\n\nexport default ModalWrapper;\n"],"names":["_ref","modalOpen","currentTags","onCloseAndUpdate","bucketName","dispatch","useAppDispatch","newKey","setNewKey","useState","newLabel","setNewLabel","isSending","setIsSending","_jsx","ModalWrapper","title","onClose","titleIcon","AddNewTagIcon","children","_jsxs","FormLayout","withBorders","containerPadding","Box","sx","marginBottom","InputBox","value","label","id","name","placeholder","onChange","e","target","Grid","item","xs","modalStyleUtils","modalButtonBar","Button","type","variant","onClick","resetForm","color","disabled","trim","addTagProcess","newTag","newTagList","_objectSpread","api","buckets","putBucketTags","tags","then","catch","error","setModalErrorSnackMessage","errorToHandler","wideLimit","iconColor","openSnackbar","setOpenSnackbar","modalSnackMessage","useSelector","state","system","modalSnackBar","useEffect","setModalSnackMessage","message","detailedErrorMsg","length","ModalBox","open","widthLimit","MainError","isModal","Snackbar","closeSnackBar","mode","autoHideDuration","condensed"],"sourceRoot":""}