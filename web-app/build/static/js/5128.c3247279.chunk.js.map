{"version":3,"file":"static/js/5128.c3247279.chunk.js","mappings":"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","sources":["screens/Console/EventDestinations/ConfTargetGeneric.tsx","screens/Console/Common/FormComponents/CSVMultiSelector/CSVMultiSelector.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport {\n  CommentBox,\n  ConsoleIcon,\n  FormLayout,\n  Grid,\n  InputBox,\n  ReadBox,\n  Switch,\n  Tooltip,\n} from \"mds\";\nimport { IElementValue, IOverrideEnv, KVField } from \"../Configurations/types\";\nimport CSVMultiSelector from \"../Common/FormComponents/CSVMultiSelector/CSVMultiSelector\";\n\ninterface IConfGenericProps {\n  onChange: (newValue: IElementValue[]) => void;\n  fields: KVField[];\n  defaultVals?: IElementValue[];\n  overrideEnv?: IOverrideEnv;\n}\n\n// Function to get defined values,\n//we make this because the backed sometimes don't return all the keys when there is an initial configuration\nconst valueDef = (key: string, type: string, defaults: IElementValue[]) => {\n  let defValue = type === \"on|off\" ? \"off\" : \"\";\n\n  if (defaults.length > 0) {\n    const storedConfig = defaults.find((element) => element.key === key);\n\n    if (storedConfig) {\n      defValue = storedConfig.value || \"\";\n    }\n  }\n\n  return defValue;\n};\n\nconst ConfTargetGeneric = ({\n  onChange,\n  fields,\n  defaultVals,\n  overrideEnv,\n}: IConfGenericProps) => {\n  const [valueHolder, setValueHolder] = useState<IElementValue[]>([]);\n  const fieldsElements = !fields ? [] : fields;\n  const defValList = !defaultVals ? [] : defaultVals;\n\n  // Effect to create all the values to hold\n  useEffect(() => {\n    const values: IElementValue[] = fields.map((field) => {\n      const stateInsert: IElementValue = {\n        key: field.name,\n        value: valueDef(field.name, field.type, defValList),\n      };\n      return stateInsert;\n    });\n\n    setValueHolder(values);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [fields, defaultVals]);\n\n  useEffect(() => {\n    onChange(valueHolder);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [valueHolder]);\n\n  const setValueElement = (key: string, value: string, index: number) => {\n    const valuesDup = [...valueHolder];\n    value = value.trim();\n    valuesDup[index] = { key, value };\n\n    setValueHolder(valuesDup);\n  };\n\n  const fieldDefinition = (field: KVField, item: number) => {\n    const holderItem = valueHolder[item];\n\n    if (holderItem) {\n      // Override Value with env var, we display generic string component\n      const override = overrideEnv?.[`${holderItem.key}`];\n\n      if (override) {\n        return (\n          <ReadBox\n            label={field.label}\n            actionButton={\n              <Grid\n                item\n                sx={{\n                  display: \"flex\",\n                  justifyContent: \"flex-end\",\n                  paddingRight: \"10px\",\n                }}\n              >\n                <Tooltip\n                  tooltip={`This value is set from the ${override.overrideEnv} environment variable`}\n                  placement={\"left\"}\n                >\n                  <ConsoleIcon style={{ width: 20 }} />\n                </Tooltip>\n              </Grid>\n            }\n            sx={{ width: \"100%\" }}\n          >\n            {override.value}\n          </ReadBox>\n        );\n      }\n    }\n\n    switch (field.type) {\n      case \"on|off\":\n        const value = holderItem ? holderItem.value : \"off\";\n\n        return (\n          <Switch\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              const value = e.target.checked ? \"on\" : \"off\";\n              setValueElement(field.name, value, item);\n            }}\n            id={field.name}\n            name={field.name}\n            label={field.label}\n            value={\"switch_on\"}\n            tooltip={field.tooltip}\n            checked={value === \"on\"}\n          />\n        );\n      case \"csv\":\n        return (\n          <CSVMultiSelector\n            elements={holderItem ? holderItem.value : \"\"}\n            label={field.label}\n            name={field.name}\n            onChange={(value: string | string[]) => {\n              let valCh = \"\";\n\n              if (Array.isArray(value)) {\n                valCh = value.join(\",\");\n              } else {\n                valCh = value;\n              }\n\n              setValueElement(field.name, valCh, item);\n            }}\n            tooltip={field.tooltip}\n            commonPlaceholder={field.placeholder}\n            withBorder={true}\n          />\n        );\n      case \"comment\":\n        return (\n          <CommentBox\n            id={field.name}\n            name={field.name}\n            label={field.label}\n            tooltip={field.tooltip}\n            value={holderItem ? holderItem.value : \"\"}\n            onChange={(e) => setValueElement(field.name, e.target.value, item)}\n            placeholder={field.placeholder}\n          />\n        );\n      default:\n        return (\n          <InputBox\n            id={field.name}\n            name={field.name}\n            label={field.label}\n            tooltip={field.tooltip}\n            value={holderItem ? holderItem.value : \"\"}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              setValueElement(field.name, e.target.value, item)\n            }\n            placeholder={field.placeholder}\n          />\n        );\n    }\n  };\n\n  return (\n    <FormLayout withBorders={false} containerPadding={false}>\n      {fieldsElements.map((field, item) => (\n        <Fragment key={field.name}>{fieldDefinition(field, item)}</Fragment>\n      ))}\n    </FormLayout>\n  );\n};\n\nexport default ConfTargetGeneric;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, {\n  ChangeEvent,\n  createRef,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n  Fragment,\n} from \"react\";\nimport get from \"lodash/get\";\nimport { AddIcon, Box, HelpIcon, InputBox, InputLabel, Tooltip } from \"mds\";\n\ninterface ICSVMultiSelector {\n  elements: string;\n  name: string;\n  label: string;\n  tooltip?: string;\n  commonPlaceholder?: string;\n  withBorder?: boolean;\n  onChange: (elements: string) => void;\n}\n\nconst CSVMultiSelector = ({\n  elements,\n  name,\n  label,\n  tooltip = \"\",\n  commonPlaceholder = \"\",\n  onChange,\n  withBorder = false,\n}: ICSVMultiSelector) => {\n  const [currentElements, setCurrentElements] = useState<string[]>([\"\"]);\n  const bottomList = createRef<HTMLDivElement>();\n\n  // Use effect to get the initial values from props\n  useEffect(() => {\n    if (\n      currentElements.length === 1 &&\n      currentElements[0] === \"\" &&\n      elements &&\n      elements !== \"\"\n    ) {\n      const elementsSplit = elements.split(\",\");\n      elementsSplit.push(\"\");\n\n      setCurrentElements(elementsSplit);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [elements, currentElements]);\n\n  // Use effect to send new values to onChange\n  useEffect(() => {\n    if (currentElements.length > 1) {\n      const refScroll = bottomList.current;\n      if (refScroll) {\n        refScroll.scrollIntoView(false);\n      }\n    }\n  }, [currentElements, bottomList]);\n\n  const onChangeCallback = useCallback(\n    (newString: string) => {\n      onChange(newString);\n    },\n    [onChange],\n  );\n\n  // We avoid multiple re-renders / hang issue typing too fast\n  const firstUpdate = useRef(true);\n  useEffect(() => {\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n      return;\n    }\n    const elementsString = currentElements\n      .filter((element) => element.trim() !== \"\")\n      .join(\",\");\n\n    onChangeCallback(elementsString);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentElements]);\n\n  // If the last input is not empty, we add a new one\n  const addEmptyLine = (elementsUp: string[]) => {\n    if (elementsUp[elementsUp.length - 1].trim() !== \"\") {\n      const cpList = [...elementsUp];\n      cpList.push(\"\");\n      setCurrentElements(cpList);\n    }\n  };\n\n  // Onchange function for input box, we get the dataset-index & only update that value in the array\n  const onChangeElement = (e: ChangeEvent<HTMLInputElement>) => {\n    e.persist();\n\n    let updatedElement = [...currentElements];\n    const index = get(e.target, \"dataset.index\", \"0\");\n    const indexNum = parseInt(index);\n    updatedElement[indexNum] = e.target.value;\n\n    setCurrentElements(updatedElement);\n  };\n\n  const inputs = currentElements.map((element, index) => {\n    return (\n      <InputBox\n        key={`csv-multi-${name}-${index.toString()}`}\n        id={`${name}-${index.toString()}`}\n        label={\"\"}\n        name={`${name}-${index.toString()}`}\n        value={currentElements[index]}\n        onChange={onChangeElement}\n        index={index}\n        placeholder={commonPlaceholder}\n        overlayIcon={index === currentElements.length - 1 ? <AddIcon /> : null}\n        overlayAction={() => {\n          addEmptyLine(currentElements);\n        }}\n      />\n    );\n  });\n\n  return (\n    <Fragment>\n      <Box sx={{ display: \"flex\" }} className={\"inputItem\"}>\n        <InputLabel\n          sx={{\n            alignItems: \"flex-start\",\n          }}\n        >\n          <span>{label}</span>\n          {tooltip !== \"\" && (\n            <Box\n              sx={{\n                marginLeft: 5,\n                display: \"flex\",\n                alignItems: \"center\",\n                \"& .min-icon\": {\n                  width: 13,\n                },\n              }}\n            >\n              <Tooltip tooltip={tooltip} placement=\"top\">\n                <Box className={tooltip}>\n                  <HelpIcon />\n                </Box>\n              </Tooltip>\n            </Box>\n          )}\n        </InputLabel>\n        <Box\n          withBorders={withBorder}\n          sx={{\n            width: \"100%\",\n            overflowY: \"auto\",\n            height: 150,\n            position: \"relative\",\n          }}\n        >\n          {inputs}\n          <div ref={bottomList} />\n        </Box>\n      </Box>\n    </Fragment>\n  );\n};\nexport default CSVMultiSelector;\n"],"names":["valueDef","key","type","defaults","defValue","length","storedConfig","find","element","value","_ref","onChange","fields","defaultVals","overrideEnv","valueHolder","setValueHolder","useState","fieldsElements","defValList","useEffect","values","map","field","name","setValueElement","index","valuesDup","trim","fieldDefinition","item","holderItem","override","concat","_jsx","ReadBox","label","actionButton","Grid","sx","display","justifyContent","paddingRight","children","Tooltip","tooltip","placement","ConsoleIcon","style","width","Switch","e","target","checked","id","CSVMultiSelector","elements","valCh","Array","isArray","join","commonPlaceholder","placeholder","withBorder","CommentBox","InputBox","FormLayout","withBorders","containerPadding","Fragment","currentElements","setCurrentElements","bottomList","createRef","elementsSplit","split","push","refScroll","current","scrollIntoView","onChangeCallback","useCallback","newString","firstUpdate","useRef","elementsString","filter","onChangeElement","persist","updatedElement","get","parseInt","inputs","toString","overlayIcon","AddIcon","overlayAction","elementsUp","cpList","addEmptyLine","_jsxs","Box","className","InputLabel","alignItems","marginLeft","HelpIcon","overflowY","height","position","ref"],"sourceRoot":""}