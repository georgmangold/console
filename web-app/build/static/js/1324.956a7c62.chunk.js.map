{"version":3,"file":"static/js/1324.956a7c62.chunk.js","mappings":"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","sources":["utils/sortFunctions.ts","screens/Console/Groups/UsersSelectors.tsx","screens/Console/Policies/PolicySelectors.tsx","screens/Console/Policies/SetPolicy.tsx","screens/Console/Groups/DeleteGroup.tsx","screens/Console/Groups/AddGroupMember.tsx","screens/Console/Groups/GroupsDetails.tsx","screens/Console/Common/ModalWrapper/ModalWrapper.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { Policy, User } from \"api/consoleApi\";\n\ninterface policyDetailsInterface {\n  policy: string;\n}\n\nexport const usersSort = (a: User, b: User) => {\n  if (a.accessKey && b.accessKey) {\n    if (a.accessKey > b.accessKey) {\n      return 1;\n    }\n    if (a.accessKey < b.accessKey) {\n      return -1;\n    }\n  }\n  // a must be equal to b\n  return 0;\n};\n\nexport const policySort = (a: Policy, b: Policy) => {\n  if (a.name! > b.name!) {\n    return 1;\n  }\n  if (a.name! < b.name!) {\n    return -1;\n  }\n  // a must be equal to b\n  return 0;\n};\n\nexport const stringSort = (a: string, b: string) => {\n  if (a > b) {\n    return 1;\n  }\n  if (a < b) {\n    return -1;\n  }\n  // a must be equal to b\n  return 0;\n};\n\nexport const policyDetailsSort = (\n  a: policyDetailsInterface,\n  b: policyDetailsInterface,\n) => {\n  if (a.policy > b.policy) {\n    return 1;\n  }\n  if (a.policy < b.policy) {\n    return -1;\n  }\n  // a must be equal to b\n  return 0;\n};\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState, Fragment } from \"react\";\nimport get from \"lodash/get\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport { Box, DataTable, Grid, ProgressBar } from \"mds\";\n\nimport { usersSort } from \"../../../utils/sortFunctions\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport SearchBox from \"../Common/SearchBox\";\n\ninterface IGroupsProps {\n  selectedUsers: string[];\n  setSelectedUsers: any;\n  editMode?: boolean;\n}\n\nconst UsersSelectors = ({\n  selectedUsers,\n  setSelectedUsers,\n  editMode = false,\n}: IGroupsProps) => {\n  const dispatch = useAppDispatch();\n  //Local States\n  const [records, setRecords] = useState<any[]>([]);\n  const [loading, isLoading] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string>(\"\");\n\n  const fetchUsers = useCallback(() => {\n    api.users\n      .listUsers()\n      .then((res) => {\n        let users = get(res.data, \"users\", []);\n\n        if (!users) {\n          users = [];\n        }\n\n        setRecords(users.sort(usersSort));\n        isLoading(false);\n      })\n      .catch((err) => {\n        dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n        isLoading(false);\n      });\n  }, [dispatch]);\n\n  //Effects\n  useEffect(() => {\n    isLoading(true);\n  }, []);\n\n  useEffect(() => {\n    if (loading) {\n      fetchUsers();\n    }\n  }, [loading, fetchUsers]);\n\n  const selUsers = !selectedUsers ? [] : selectedUsers;\n\n  //Fetch Actions\n  const selectionChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const targetD = e.target;\n    const value = targetD.value;\n    const checked = targetD.checked;\n\n    let elements: string[] = [...selUsers]; // We clone the selectedGroups array\n\n    if (checked) {\n      // If the user has checked this field we need to push this to selectedGroupsList\n      elements.push(value);\n    } else {\n      // User has unchecked this field, we need to remove it from the list\n      elements = elements.filter((element) => element !== value);\n    }\n    setSelectedUsers(elements);\n\n    return elements;\n  };\n\n  const filteredRecords = records.filter((elementItem) =>\n    elementItem.accessKey.includes(filter),\n  );\n\n  return (\n    <Grid item xs={12} className={\"inputItem\"}>\n      <Box>\n        {loading && <ProgressBar />}\n        {records?.length > 0 ? (\n          <Fragment>\n            <Grid item xs={12} className={\"inputItem\"}>\n              <SearchBox\n                label={editMode ? \"Edit Members\" : \"Assign Users\"}\n                placeholder=\"Filter Users\"\n                onChange={setFilter}\n                value={filter}\n              />\n            </Grid>\n            <DataTable\n              columns={[{ label: \"Access Key\", elementKey: \"accessKey\" }]}\n              onSelect={selectionChanged}\n              selectedItems={selUsers}\n              isLoading={loading}\n              records={filteredRecords}\n              entityName=\"Users\"\n              idField=\"accessKey\"\n              customPaperHeight={\"200px\"}\n            />\n          </Fragment>\n        ) : (\n          <Box\n            sx={{\n              textAlign: \"center\",\n              padding: \"10px 0\",\n            }}\n          >\n            No Users to display\n          </Box>\n        )}\n      </Box>\n    </Grid>\n  );\n};\n\nexport default UsersSelectors;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\n\nimport { Box, DataTable, Grid, ProgressBar } from \"mds\";\nimport { policySort } from \"../../../utils/sortFunctions\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport SearchBox from \"../Common/SearchBox\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\nimport { useSelector } from \"react-redux\";\nimport { api } from \"../../../api\";\n\ninterface ISelectPolicyProps {\n  selectedPolicy?: string[];\n  noTitle?: boolean;\n}\n\nconst PolicySelectors = ({ noTitle = false }: ISelectPolicyProps) => {\n  const dispatch = useAppDispatch();\n  // Local State\n  const [records, setRecords] = useState<any[]>([]);\n  const [loading, isLoading] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string>(\"\");\n\n  const currentPolicies = useSelector(\n    (state: AppState) => state.createUser.selectedPolicies,\n  );\n\n  const fetchPolicies = useCallback(() => {\n    isLoading(true);\n\n    api.policies\n      .listPolicies()\n      .then((res) => {\n        const policies = res.data.policies ?? [];\n        isLoading(false);\n        setRecords(policies.sort(policySort));\n      })\n      .catch((err: ErrorResponseHandler) => {\n        isLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  }, [dispatch]);\n\n  //Effects\n  useEffect(() => {\n    isLoading(true);\n  }, []);\n\n  useEffect(() => {\n    if (loading) {\n      fetchPolicies();\n    }\n  }, [loading, fetchPolicies]);\n\n  const selectionChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const targetD = e.target;\n    const value = targetD.value;\n    const checked = targetD.checked;\n\n    let elements: string[] = [...currentPolicies]; // We clone the checkedUsers array\n\n    if (checked) {\n      // If the user has checked this field we need to push this to checkedUsersList\n      elements.push(value);\n    } else {\n      // User has unchecked this field, we need to remove it from the list\n      elements = elements.filter((element) => element !== value);\n    }\n    // remove empty values\n    elements = elements.filter((element) => element !== \"\");\n\n    dispatch(setSelectedPolicies(elements));\n  };\n\n  const filteredRecords = records.filter((elementItem) =>\n    elementItem.name.includes(filter),\n  );\n\n  return (\n    <Grid item xs={12} className={\"inputItem\"}>\n      {loading && <ProgressBar />}\n      {records.length > 0 ? (\n        <Fragment>\n          <Grid item xs={12} className={\"inputItem\"}>\n            <SearchBox\n              placeholder=\"Start typing to search for a Policy\"\n              onChange={(value) => {\n                setFilter(value);\n              }}\n              value={filter}\n              label={!noTitle ? \"Assign Policies\" : \"\"}\n            />\n          </Grid>\n\n          <DataTable\n            columns={[{ label: \"Policy\", elementKey: \"name\" }]}\n            onSelect={selectionChanged}\n            selectedItems={currentPolicies}\n            isLoading={loading}\n            records={filteredRecords}\n            entityName=\"Policies\"\n            idField=\"name\"\n            customPaperHeight={\"200px\"}\n          />\n        </Fragment>\n      ) : (\n        <Box\n          sx={{\n            textAlign: \"center\",\n            padding: \"10px 0\",\n          }}\n        >\n          No Policies Available\n        </Box>\n      )}\n    </Grid>\n  );\n};\n\nexport default PolicySelectors;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport get from \"lodash/get\";\nimport { useSelector } from \"react-redux\";\nimport { Button, FormLayout, ReadBox, Grid, ProgressBar } from \"mds\";\n\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport { modalStyleUtils } from \"../Common/FormComponents/common/styleLibrary\";\nimport { User } from \"../Users/types\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\nimport PolicySelectors from \"./PolicySelectors\";\nimport api from \"../../../common/api\";\n\ninterface ISetPolicyProps {\n  closeModalAndRefresh: () => void;\n  selectedUser: User | null;\n  selectedGroups: string[] | null;\n  open: boolean;\n}\n\nconst SetPolicy = ({\n  closeModalAndRefresh,\n  selectedUser,\n  selectedGroups,\n  open,\n}: ISetPolicyProps) => {\n  const dispatch = useAppDispatch();\n  //Local States\n  const [loading, setLoading] = useState<boolean>(false);\n  const [actualPolicy, setActualPolicy] = useState<string[]>([]);\n  const [selectedPolicy, setSelectedPolicy] = useState<string[]>([]);\n  const currentPolicies = useSelector(\n    (state: AppState) => state.createUser.selectedPolicies,\n  );\n  const setPolicyAction = () => {\n    let users = null;\n    let groups = null;\n    if (selectedGroups !== null) {\n      groups = selectedGroups;\n    } else {\n      users = [\" \"];\n\n      if (selectedUser !== null) {\n        users = [selectedUser.accessKey];\n      }\n    }\n\n    setLoading(true);\n\n    api\n      .invoke(\"PUT\", `/api/v1/set-policy-multi`, {\n        name: currentPolicies,\n        groups: groups,\n        users: users,\n      })\n      .then(() => {\n        setLoading(false);\n        closeModalAndRefresh();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  };\n\n  const fetchGroupInformation = () => {\n    if (selectedGroups?.length === 1) {\n      api\n        .invoke(\"GET\", `/api/v1/group/${encodeURIComponent(selectedGroups[0])}`)\n        .then((res: any) => {\n          const groupPolicy: String = get(res, \"policy\", \"\");\n          setActualPolicy(groupPolicy.split(\",\"));\n          setSelectedPolicy(groupPolicy.split(\",\"));\n          dispatch(setSelectedPolicies(groupPolicy.split(\",\")));\n        })\n        .catch((err: ErrorResponseHandler) => {\n          dispatch(setModalErrorSnackMessage(err));\n          setLoading(false);\n        });\n    }\n  };\n\n  const resetSelection = () => {\n    setSelectedPolicy(actualPolicy);\n    dispatch(setSelectedPolicies(actualPolicy));\n  };\n\n  useEffect(() => {\n    if (open) {\n      if (selectedGroups?.length === 1) {\n        fetchGroupInformation();\n        return;\n      }\n\n      const userPolicy: string[] = get(selectedUser, \"policy\", []);\n      setActualPolicy(userPolicy);\n      setSelectedPolicy(userPolicy);\n      dispatch(setSelectedPolicies(userPolicy));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open, selectedGroups?.length, selectedUser]);\n\n  const userName = get(selectedUser, \"accessKey\", \"\");\n\n  return (\n    <ModalWrapper\n      onClose={() => {\n        closeModalAndRefresh();\n      }}\n      modalOpen={open}\n      title=\"Set Policies\"\n    >\n      <FormLayout withBorders={false} containerPadding={false}>\n        {(selectedGroups?.length === 1 || selectedUser != null) && (\n          <Fragment>\n            <ReadBox\n              label={`Selected ${selectedGroups !== null ? \"Group\" : \"User\"}`}\n              sx={{ width: \"100%\" }}\n            >\n              {selectedGroups !== null ? selectedGroups[0] : userName}\n            </ReadBox>\n            <ReadBox label={\"Current Policy\"} sx={{ width: \"100%\" }}>\n              {actualPolicy.join(\", \")}\n            </ReadBox>\n          </Fragment>\n        )}\n        {selectedGroups && selectedGroups?.length > 1 && (\n          <ReadBox label={\"Selected Groups\"} sx={{ width: \"100%\" }}>\n            {selectedGroups.join(\", \")}\n          </ReadBox>\n        )}\n        <Grid item xs={12}>\n          <PolicySelectors selectedPolicy={selectedPolicy} />\n        </Grid>\n      </FormLayout>\n      <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n        <Button\n          id={\"reset\"}\n          type=\"button\"\n          variant=\"regular\"\n          onClick={resetSelection}\n          label={\"Reset\"}\n        />\n        <Button\n          id={\"save\"}\n          type=\"button\"\n          variant=\"callAction\"\n          color=\"primary\"\n          disabled={loading}\n          onClick={setPolicyAction}\n          label={\"Save\"}\n        />\n      </Grid>\n      {loading && (\n        <Grid item xs={12}>\n          <ProgressBar />\n        </Grid>\n      )}\n    </ModalWrapper>\n  );\n};\n\nexport default SetPolicy;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useState } from \"react\";\nimport { ConfirmDeleteIcon } from \"mds\";\nimport { setErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport ConfirmDialog from \"../Common/ModalWrapper/ConfirmDialog\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport { ApiError, HttpResponse } from \"api/consoleApi\";\n\ninterface IDeleteGroup {\n  selectedGroups: string[];\n  deleteOpen: boolean;\n  closeDeleteModalAndRefresh: any;\n}\n\nconst DeleteGroup = ({\n  selectedGroups,\n  deleteOpen,\n  closeDeleteModalAndRefresh,\n}: IDeleteGroup) => {\n  const dispatch = useAppDispatch();\n  const onClose = () => closeDeleteModalAndRefresh(false);\n  const [loadingDelete, setLoadingDelete] = useState<boolean>(false);\n\n  if (!selectedGroups) {\n    return null;\n  }\n  const onDeleteGroups = () => {\n    for (let group of selectedGroups) {\n      setLoadingDelete(true);\n      api.group\n        .removeGroup(group)\n        .then((_) => {\n          closeDeleteModalAndRefresh(true);\n        })\n        .catch(async (res: HttpResponse<void, ApiError>) => {\n          const err = (await res.json()) as ApiError;\n          dispatch(setErrorSnackMessage(errorToHandler(err)));\n          closeDeleteModalAndRefresh(false);\n        })\n        .finally(() => setLoadingDelete(false));\n    }\n  };\n\n  const renderGroups = selectedGroups.map((group) => (\n    <div key={group}>\n      <b>{group}</b>\n    </div>\n  ));\n\n  return (\n    <ConfirmDialog\n      title={`Delete Group${selectedGroups.length > 1 ? \"s\" : \"\"}`}\n      confirmText={\"Delete\"}\n      isOpen={deleteOpen}\n      titleIcon={<ConfirmDeleteIcon />}\n      isLoading={loadingDelete}\n      onConfirm={onDeleteGroups}\n      onClose={onClose}\n      confirmationContent={\n        <Fragment>\n          Are you sure you want to delete the following{\" \"}\n          {selectedGroups.length === 1 ? \"\" : selectedGroups.length} group\n          {selectedGroups.length > 1 ? \"s?\" : \"?\"}\n          {renderGroups}\n        </Fragment>\n      }\n    />\n  );\n};\n\nexport default DeleteGroup;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport { AddMembersToGroupIcon, Button, FormLayout, Grid, ReadBox } from \"mds\";\nimport { modalStyleUtils } from \"../Common/FormComponents/common/styleLibrary\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport UsersSelectors from \"./UsersSelectors\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\n\ntype UserPickerModalProps = {\n  title?: string;\n  preSelectedUsers?: string[];\n  selectedGroup?: string;\n  open: boolean;\n  onClose: () => void;\n  onSaveClick: () => void;\n  groupStatus?: string;\n};\n\nconst AddGroupMember = ({\n  title = \"\",\n  groupStatus = \"enabled\",\n  preSelectedUsers = [],\n  selectedGroup = \"\",\n  open,\n  onClose,\n}: UserPickerModalProps) => {\n  const dispatch = useAppDispatch();\n  const [selectedUsers, setSelectedUsers] = useState(preSelectedUsers);\n\n  function addMembersToGroup() {\n    return api.group\n      .updateGroup(selectedGroup, {\n        members: selectedUsers,\n        status: groupStatus,\n      })\n      .then(() => {\n        onClose();\n      })\n      .catch((err) => {\n        onClose();\n        dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n      });\n  }\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      onClose={onClose}\n      title={title}\n      titleIcon={<AddMembersToGroupIcon />}\n    >\n      <FormLayout withBorders={false} containerPadding={false}>\n        <ReadBox label={`Selected Group`} sx={{ width: \"100%\" }}>\n          {selectedGroup}\n        </ReadBox>\n        <UsersSelectors\n          selectedUsers={selectedUsers}\n          setSelectedUsers={setSelectedUsers}\n          editMode={!selectedGroup}\n        />\n      </FormLayout>\n      <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n        <Button\n          id={\"reset-add-group-member\"}\n          type=\"button\"\n          variant=\"regular\"\n          onClick={() => {\n            setSelectedUsers(preSelectedUsers);\n          }}\n          label={\"Reset\"}\n        />\n\n        <Button\n          id={\"save-add-group-member\"}\n          type=\"button\"\n          variant=\"callAction\"\n          onClick={() => {\n            addMembersToGroup();\n          }}\n          label={\"Save\"}\n        />\n      </Grid>\n    </ModalWrapper>\n  );\n};\n\nexport default AddGroupMember;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport {\n  AddIcon,\n  BackLink,\n  Box,\n  Button,\n  DataTable,\n  Grid,\n  GroupsIcon,\n  IAMPoliciesIcon,\n  PageLayout,\n  ScreenTitle,\n  SectionTitle,\n  Switch,\n  Tabs,\n  TrashIcon,\n} from \"mds\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport { Group } from \"api/consoleApi\";\nimport {\n  addUserToGroupPermissions,\n  CONSOLE_UI_RESOURCE,\n  createGroupPermissions,\n  editGroupMembersPermissions,\n  enableDisableGroupPermissions,\n  getGroupPermissions,\n  IAM_PAGES,\n  listUsersPermissions,\n  permissionTooltipHelper,\n  setGroupPoliciesPermissions,\n  viewPolicyPermissions,\n  viewUserPermissions,\n} from \"../../../common/SecureComponent/permissions\";\nimport {\n  hasPermission,\n  SecureComponent,\n} from \"../../../common/SecureComponent\";\nimport { setHelpName, setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\nimport SetPolicy from \"../Policies/SetPolicy\";\nimport AddGroupMember from \"./AddGroupMember\";\nimport DeleteGroup from \"./DeleteGroup\";\nimport SearchBox from \"../Common/SearchBox\";\nimport TooltipWrapper from \"../Common/TooltipWrapper/TooltipWrapper\";\nimport HelpMenu from \"../HelpMenu\";\nimport PageHeaderWrapper from \"../Common/PageHeaderWrapper/PageHeaderWrapper\";\n\nconst formatPolicy = (policy: string = \"\"): string[] => {\n  if (policy.length <= 0) return [];\n  return policy.split(\",\");\n};\n\nconst GroupsDetails = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const params = useParams();\n\n  const [groupDetails, setGroupDetails] = useState<Group>({});\n  const [policyOpen, setPolicyOpen] = useState<boolean>(false);\n  const [usersOpen, setUsersOpen] = useState<boolean>(false);\n  const [deleteOpen, setDeleteOpen] = useState<boolean>(false);\n  const [memberFilter, setMemberFilter] = useState<string>(\"\");\n  const [currentTab, setCurrentTab] = useState<string>(\"members\");\n\n  const { members = [], policy = \"\", status: groupEnabled } = groupDetails;\n\n  const filteredMembers = members.filter((elementItem) =>\n    elementItem.includes(memberFilter),\n  );\n\n  const viewUser = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    viewUserPermissions,\n    true,\n  );\n\n  useEffect(() => {\n    dispatch(setHelpName(\"group_details\"));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (params.groupName) {\n      fetchGroupInfo();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [params.groupName]);\n\n  const groupPolicies = formatPolicy(policy);\n  const isGroupEnabled = groupEnabled === \"enabled\";\n  const memberActionText = members.length > 0 ? \"Edit Members\" : \"Add Members\";\n\n  const getGroupDetails = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    getGroupPermissions,\n  );\n\n  const canEditGroupMembers = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    editGroupMembersPermissions,\n    true,\n  );\n\n  const canSetPolicies = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    setGroupPoliciesPermissions,\n    true,\n  );\n\n  const canViewPolicy = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    viewPolicyPermissions,\n    true,\n  );\n\n  function fetchGroupInfo() {\n    if (getGroupDetails) {\n      api.group\n        .groupInfo(params.groupName || \"\")\n        .then((res) => {\n          setGroupDetails(res.data);\n        })\n        .catch((err) => {\n          dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n          setGroupDetails({});\n        });\n    }\n  }\n\n  function toggleGroupStatus(nextStatus: boolean) {\n    return api.group\n      .updateGroup(params.groupName || \"\", {\n        members: members,\n        status: nextStatus ? \"enabled\" : \"disabled\",\n      })\n      .then(() => {\n        fetchGroupInfo();\n      })\n      .catch((err) => {\n        dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n      });\n  }\n\n  const groupsTabContent = (\n    <Box\n      onMouseMove={() => {\n        dispatch(setHelpName(\"groups_members\"));\n      }}\n    >\n      <SectionTitle\n        separator\n        sx={{ marginBottom: 15 }}\n        actions={\n          <Box\n            sx={{\n              display: \"flex\",\n              gap: 10,\n            }}\n          >\n            <SearchBox\n              placeholder={\"Search members\"}\n              onChange={(searchText) => {\n                setMemberFilter(searchText);\n              }}\n              value={memberFilter}\n              sx={{\n                maxWidth: 280,\n              }}\n            />\n            <SecureComponent\n              resource={CONSOLE_UI_RESOURCE}\n              scopes={addUserToGroupPermissions}\n              errorProps={{ disabled: true }}\n            >\n              <TooltipWrapper\n                tooltip={\n                  canEditGroupMembers\n                    ? memberActionText\n                    : permissionTooltipHelper(\n                        createGroupPermissions,\n                        \"edit Group membership\",\n                      )\n                }\n              >\n                <Button\n                  id={\"add-user-group\"}\n                  label={memberActionText}\n                  variant=\"callAction\"\n                  icon={<AddIcon />}\n                  onClick={() => {\n                    setUsersOpen(true);\n                  }}\n                  disabled={!canEditGroupMembers}\n                />\n              </TooltipWrapper>\n            </SecureComponent>\n          </Box>\n        }\n      >\n        Members\n      </SectionTitle>\n      <Grid item xs={12}>\n        <SecureComponent\n          resource={CONSOLE_UI_RESOURCE}\n          scopes={listUsersPermissions}\n          errorProps={{ disabled: true }}\n        >\n          <TooltipWrapper\n            tooltip={\n              viewUser\n                ? \"\"\n                : permissionTooltipHelper(\n                    viewUserPermissions,\n                    \"view User details\",\n                  )\n            }\n          >\n            <DataTable\n              itemActions={[\n                {\n                  type: \"view\",\n                  onClick: (userName) => {\n                    navigate(\n                      `${IAM_PAGES.USERS}/${encodeURIComponent(userName)}`,\n                    );\n                  },\n                  isDisabled: !viewUser,\n                },\n              ]}\n              columns={[{ label: \"Access Key\" }]}\n              selectedItems={[]}\n              isLoading={false}\n              records={filteredMembers}\n              entityName=\"Users\"\n            />\n          </TooltipWrapper>\n        </SecureComponent>\n      </Grid>\n    </Box>\n  );\n\n  const policiesTabContent = (\n    <Fragment>\n      <Box\n        onMouseMove={() => {\n          dispatch(setHelpName(\"groups_policies\"));\n        }}\n      >\n        <SectionTitle\n          separator\n          sx={{ marginBottom: 15 }}\n          actions={\n            <TooltipWrapper\n              tooltip={\n                canSetPolicies\n                  ? \"Set Policies\"\n                  : permissionTooltipHelper(\n                      setGroupPoliciesPermissions,\n                      \"assign Policies\",\n                    )\n              }\n            >\n              <Button\n                id={\"set-policies\"}\n                label={`Set Policies`}\n                variant=\"callAction\"\n                icon={<IAMPoliciesIcon />}\n                onClick={() => {\n                  setPolicyOpen(true);\n                }}\n                disabled={!canSetPolicies}\n              />\n            </TooltipWrapper>\n          }\n        >\n          Policies\n        </SectionTitle>\n      </Box>\n      <Grid item xs={12}>\n        <TooltipWrapper\n          tooltip={\n            canViewPolicy\n              ? \"\"\n              : permissionTooltipHelper(\n                  viewPolicyPermissions,\n                  \"view Policy details\",\n                )\n          }\n        >\n          <DataTable\n            itemActions={[\n              {\n                type: \"view\",\n                onClick: (policy) => {\n                  navigate(\n                    `${IAM_PAGES.POLICIES}/${encodeURIComponent(policy)}`,\n                  );\n                },\n                isDisabled: !canViewPolicy,\n              },\n            ]}\n            columns={[{ label: \"Policy\" }]}\n            isLoading={false}\n            records={groupPolicies}\n            entityName=\"Policies\"\n          />\n        </TooltipWrapper>\n      </Grid>\n    </Fragment>\n  );\n\n  return (\n    <Fragment>\n      {policyOpen ? (\n        <SetPolicy\n          open={policyOpen}\n          selectedGroups={[params.groupName || \"\"]}\n          selectedUser={null}\n          closeModalAndRefresh={() => {\n            setPolicyOpen(false);\n            fetchGroupInfo();\n            dispatch(setSelectedPolicies([]));\n          }}\n        />\n      ) : null}\n\n      {usersOpen ? (\n        <AddGroupMember\n          selectedGroup={params.groupName}\n          onSaveClick={() => {}}\n          title={memberActionText}\n          groupStatus={groupEnabled}\n          preSelectedUsers={members}\n          open={usersOpen}\n          onClose={() => {\n            setUsersOpen(false);\n            fetchGroupInfo();\n          }}\n        />\n      ) : null}\n\n      {deleteOpen && (\n        <DeleteGroup\n          deleteOpen={deleteOpen}\n          selectedGroups={[params.groupName || \"\"]}\n          closeDeleteModalAndRefresh={(isDelSuccess: boolean) => {\n            setDeleteOpen(false);\n            if (isDelSuccess) {\n              navigate(IAM_PAGES.GROUPS);\n            }\n          }}\n        />\n      )}\n      <PageHeaderWrapper\n        label={\n          <Fragment>\n            <BackLink\n              label={\"Groups\"}\n              onClick={() => navigate(IAM_PAGES.GROUPS)}\n            />\n          </Fragment>\n        }\n        actions={<HelpMenu />}\n      />\n      <PageLayout>\n        <Grid item xs={12}>\n          <ScreenTitle\n            icon={\n              <Fragment>\n                <GroupsIcon width={40} />\n              </Fragment>\n            }\n            title={params.groupName || \"\"}\n            subTitle={null}\n            bottomBorder\n            actions={\n              <Box\n                sx={{\n                  display: \"flex\",\n                  fontSize: 14,\n                  alignItems: \"center\",\n                  gap: 15,\n                }}\n              >\n                <span>Group Status:</span>\n                <span id=\"group-status-label\" style={{ fontWeight: \"bold\" }}>\n                  {isGroupEnabled ? \"Enabled\" : \"Disabled\"}\n                </span>\n                <TooltipWrapper\n                  tooltip={\n                    hasPermission(\n                      CONSOLE_UI_RESOURCE,\n                      enableDisableGroupPermissions,\n                      true,\n                    )\n                      ? \"\"\n                      : permissionTooltipHelper(\n                          enableDisableGroupPermissions,\n                          \"enable or disable Groups\",\n                        )\n                  }\n                >\n                  <SecureComponent\n                    resource={CONSOLE_UI_RESOURCE}\n                    scopes={enableDisableGroupPermissions}\n                    errorProps={{ disabled: true }}\n                    matchAll\n                  >\n                    <Switch\n                      indicatorLabels={[\"Enabled\", \"Disabled\"]}\n                      checked={isGroupEnabled}\n                      value={\"group_enabled\"}\n                      id=\"group-status\"\n                      name=\"group-status\"\n                      onChange={() => {\n                        toggleGroupStatus(!isGroupEnabled);\n                      }}\n                      switchOnly\n                    />\n                  </SecureComponent>\n                </TooltipWrapper>\n\n                <TooltipWrapper tooltip={\"Delete Group\"}>\n                  <Button\n                    id={\"delete-user-group\"}\n                    variant=\"secondary\"\n                    icon={<TrashIcon />}\n                    onClick={() => {\n                      setDeleteOpen(true);\n                    }}\n                  />\n                </TooltipWrapper>\n              </Box>\n            }\n            sx={{ marginBottom: 15 }}\n          />\n        </Grid>\n\n        <Grid item xs={12}>\n          <Tabs\n            options={[\n              {\n                tabConfig: { id: \"members\", label: \"Members\" },\n                content: groupsTabContent,\n              },\n              {\n                tabConfig: { id: \"policies\", label: \"Policies\" },\n                content: policiesTabContent,\n              },\n            ]}\n            currentTabOrPath={currentTab}\n            onTabClick={setCurrentTab}\n          />\n        </Grid>\n      </PageLayout>\n    </Fragment>\n  );\n};\n\nexport default GroupsDetails;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ModalBox, Snackbar } from \"mds\";\nimport { CSSObject } from \"styled-components\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport { setModalSnackMessage } from \"../../../../systemSlice\";\nimport MainError from \"../MainError/MainError\";\n\ninterface IModalProps {\n  onClose: () => void;\n  modalOpen: boolean;\n  title: string | React.ReactNode;\n  children: any;\n  wideLimit?: boolean;\n  titleIcon?: React.ReactNode;\n  iconColor?: \"default\" | \"delete\" | \"accept\";\n  sx?: CSSObject;\n}\n\nconst ModalWrapper = ({\n  onClose,\n  modalOpen,\n  title,\n  children,\n  wideLimit = true,\n  titleIcon = null,\n  iconColor = \"default\",\n  sx,\n}: IModalProps) => {\n  const dispatch = useAppDispatch();\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\n\n  const modalSnackMessage = useSelector(\n    (state: AppState) => state.system.modalSnackBar,\n  );\n\n  useEffect(() => {\n    dispatch(setModalSnackMessage(\"\"));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (modalSnackMessage) {\n      if (modalSnackMessage.message === \"\") {\n        setOpenSnackbar(false);\n        return;\n      }\n      // Open SnackBar\n      if (modalSnackMessage.type !== \"error\") {\n        setOpenSnackbar(true);\n      }\n    }\n  }, [modalSnackMessage]);\n\n  const closeSnackBar = () => {\n    setOpenSnackbar(false);\n    dispatch(setModalSnackMessage(\"\"));\n  };\n\n  let message = \"\";\n\n  if (modalSnackMessage) {\n    message = modalSnackMessage.detailedErrorMsg;\n    if (message === \"\" || (message && message.length < 5)) {\n      message = modalSnackMessage.message;\n    }\n  }\n\n  return (\n    <ModalBox\n      onClose={onClose}\n      open={modalOpen}\n      title={title}\n      titleIcon={titleIcon}\n      widthLimit={wideLimit}\n      sx={sx}\n      iconColor={iconColor}\n    >\n      <MainError isModal={true} />\n      <Snackbar\n        onClose={closeSnackBar}\n        open={openSnackbar}\n        message={message}\n        mode={\"inline\"}\n        variant={modalSnackMessage.type === \"error\" ? \"error\" : \"default\"}\n        autoHideDuration={modalSnackMessage.type === \"error\" ? 10 : 5}\n        condensed\n      />\n      {children}\n    </ModalBox>\n  );\n};\n\nexport default ModalWrapper;\n"],"names":["usersSort","a","b","accessKey","policySort","name","stringSort","policyDetailsSort","policy","_ref","selectedUsers","setSelectedUsers","editMode","dispatch","useAppDispatch","records","setRecords","useState","loading","isLoading","filter","setFilter","fetchUsers","useCallback","api","users","listUsers","then","res","get","data","sort","catch","err","setModalErrorSnackMessage","errorToHandler","error","useEffect","selUsers","filteredRecords","elementItem","includes","_jsx","Grid","item","xs","className","children","_jsxs","Box","ProgressBar","length","Fragment","SearchBox","label","placeholder","onChange","value","DataTable","columns","elementKey","onSelect","e","targetD","target","checked","elements","push","element","selectedItems","entityName","idField","customPaperHeight","sx","textAlign","padding","noTitle","currentPolicies","useSelector","state","createUser","selectedPolicies","fetchPolicies","policies","listPolicies","_res$data$policies","setSelectedPolicies","closeModalAndRefresh","selectedUser","selectedGroups","open","setLoading","actualPolicy","setActualPolicy","selectedPolicy","setSelectedPolicy","invoke","concat","encodeURIComponent","groupPolicy","split","userPolicy","userName","ModalWrapper","onClose","modalOpen","title","FormLayout","withBorders","containerPadding","ReadBox","width","join","PolicySelectors","modalStyleUtils","modalButtonBar","Button","id","type","variant","onClick","resetSelection","color","disabled","setPolicyAction","groups","deleteOpen","closeDeleteModalAndRefresh","loadingDelete","setLoadingDelete","renderGroups","map","group","ConfirmDialog","confirmText","isOpen","titleIcon","ConfirmDeleteIcon","onConfirm","onDeleteGroups","removeGroup","_","async","json","setErrorSnackMessage","finally","confirmationContent","groupStatus","preSelectedUsers","selectedGroup","AddMembersToGroupIcon","UsersSelectors","updateGroup","members","status","GroupsDetails","navigate","useNavigate","params","useParams","groupDetails","setGroupDetails","policyOpen","setPolicyOpen","usersOpen","setUsersOpen","setDeleteOpen","memberFilter","setMemberFilter","currentTab","setCurrentTab","groupEnabled","filteredMembers","viewUser","hasPermission","CONSOLE_UI_RESOURCE","viewUserPermissions","setHelpName","groupName","fetchGroupInfo","groupPolicies","arguments","undefined","formatPolicy","isGroupEnabled","memberActionText","getGroupDetails","getGroupPermissions","canEditGroupMembers","editGroupMembersPermissions","canSetPolicies","setGroupPoliciesPermissions","canViewPolicy","viewPolicyPermissions","groupInfo","groupsTabContent","onMouseMove","SectionTitle","separator","marginBottom","actions","display","gap","searchText","maxWidth","SecureComponent","resource","scopes","addUserToGroupPermissions","errorProps","TooltipWrapper","tooltip","permissionTooltipHelper","createGroupPermissions","icon","AddIcon","listUsersPermissions","itemActions","IAM_PAGES","USERS","isDisabled","policiesTabContent","IAMPoliciesIcon","POLICIES","SetPolicy","AddGroupMember","onSaveClick","DeleteGroup","isDelSuccess","GROUPS","PageHeaderWrapper","BackLink","HelpMenu","PageLayout","ScreenTitle","GroupsIcon","subTitle","bottomBorder","fontSize","alignItems","style","fontWeight","enableDisableGroupPermissions","matchAll","Switch","indicatorLabels","nextStatus","switchOnly","TrashIcon","Tabs","options","tabConfig","content","currentTabOrPath","onTabClick","wideLimit","iconColor","openSnackbar","setOpenSnackbar","modalSnackMessage","system","modalSnackBar","setModalSnackMessage","message","detailedErrorMsg","ModalBox","widthLimit","MainError","isModal","Snackbar","closeSnackBar","mode","autoHideDuration","condensed"],"sourceRoot":""}