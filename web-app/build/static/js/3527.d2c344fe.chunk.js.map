{"version":3,"file":"static/js/3527.d2c344fe.chunk.js","mappings":"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","sources":["screens/Console/Common/PanelTitle/PanelTitle.tsx","screens/Console/Users/GroupsSelectors.tsx","screens/Console/Account/DeleteServiceAccount.tsx","screens/Console/Policies/PolicySelectors.tsx","screens/Console/Users/ListUsers.tsx","screens/Console/Users/ChangeUserGroups.tsx","screens/Console/Users/SetUserPolicies.tsx","screens/Console/Users/UserServiceAccountsPanel.tsx","screens/Console/Account/ChangeUserPasswordModal.tsx","screens/Console/Users/UserDetails.tsx","screens/Console/Users/AddUserHelpBox.tsx","screens/Console/Users/UserSelector.tsx","screens/Console/Users/PasswordSelector.tsx","screens/Console/Users/AddUserScreen.tsx","screens/Console/Users/AddUserServiceAccountHelpBox.tsx","screens/Console/Users/AddUserServiceAccountScreen.tsx","screens/Console/Users/Users.tsx","screens/Console/Users/DeleteUser.tsx","screens/Console/Common/CredentialsPrompt/CredentialItem.tsx","screens/Console/Common/CredentialsPrompt/CredentialsPrompt.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nconst PanelTitleContainer = styled.h1(() => ({\n  padding: 0,\n  margin: 0,\n  fontSize: \".9rem\",\n}));\n\ninterface IPanelTitle {\n  children: React.ReactNode;\n}\n\nconst PanelTitle = ({ children }: IPanelTitle) => {\n  return <PanelTitleContainer>{children}</PanelTitleContainer>;\n};\n\nexport default PanelTitle;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState, Fragment } from \"react\";\nimport get from \"lodash/get\";\n\nimport { Box, DataTable, Grid, ProgressBar } from \"mds\";\nimport { stringSort } from \"../../../utils/sortFunctions\";\nimport { GroupsList } from \"../Groups/types\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport api from \"../../../common/api\";\nimport SearchBox from \"../Common/SearchBox\";\n\ninterface IGroupsProps {\n  selectedGroups: string[];\n  setSelectedGroups: any;\n}\n\nconst GroupsSelectors = ({\n  selectedGroups,\n  setSelectedGroups,\n}: IGroupsProps) => {\n  const dispatch = useAppDispatch();\n  // Local State\n  const [records, setRecords] = useState<any[]>([]);\n  const [loading, isLoading] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string>(\"\");\n\n  const fetchGroups = useCallback(() => {\n    api\n      .invoke(\"GET\", `/api/v1/groups`)\n      .then((res: GroupsList) => {\n        let groups = get(res, \"groups\", []);\n\n        if (!groups) {\n          groups = [];\n        }\n        setRecords(groups.sort(stringSort));\n        isLoading(false);\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setModalErrorSnackMessage(err));\n        isLoading(false);\n      });\n  }, [dispatch]);\n\n  //Effects\n  useEffect(() => {\n    isLoading(true);\n  }, []);\n\n  useEffect(() => {\n    if (loading) {\n      fetchGroups();\n    }\n  }, [loading, fetchGroups]);\n\n  const selGroups = !selectedGroups ? [] : selectedGroups;\n\n  const selectionChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const targetD = e.target;\n    const value = targetD.value;\n    const checked = targetD.checked;\n\n    let elements: string[] = [...selGroups]; // We clone the selectedGroups array\n\n    if (checked) {\n      // If the user has checked this field we need to push this to selectedGroupsList\n      elements.push(value);\n    } else {\n      // User has unchecked this field, we need to remove it from the list\n      elements = elements.filter((element) => element !== value);\n    }\n    setSelectedGroups(elements);\n\n    return elements;\n  };\n\n  const filteredRecords = records.filter((elementItem) =>\n    elementItem.includes(filter),\n  );\n\n  return (\n    <Grid item xs={12} className={\"inputItem\"}>\n      {loading && <ProgressBar />}\n      {records !== null && records.length > 0 ? (\n        <Fragment>\n          <Grid item xs={12} className={\"inputItem\"}>\n            <SearchBox\n              placeholder=\"Start typing to search for Groups\"\n              onChange={setFilter}\n              value={filter}\n              label={\"Assign Groups\"}\n            />\n          </Grid>\n          <DataTable\n            columns={[{ label: \"Group\" }]}\n            onSelect={selectionChanged}\n            selectedItems={selGroups}\n            isLoading={loading}\n            records={filteredRecords}\n            entityName=\"Groups\"\n            idField=\"\"\n            customPaperHeight={\"200px\"}\n          />\n        </Fragment>\n      ) : (\n        <Box\n          sx={{\n            textAlign: \"center\",\n            padding: \"10px 0\",\n          }}\n        >\n          No Groups Available\n        </Box>\n      )}\n    </Grid>\n  );\n};\n\nexport default GroupsSelectors;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useState } from \"react\";\nimport ConfirmDialog from \"../Common/ModalWrapper/ConfirmDialog\";\nimport { ConfirmDeleteIcon } from \"mds\";\nimport { setErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport { api } from \"api\";\nimport { ApiError, HttpResponse } from \"api/consoleApi\";\nimport { errorToHandler } from \"api/errors\";\n\ninterface IDeleteServiceAccountProps {\n  closeDeleteModalAndRefresh: (refresh: boolean) => void;\n  deleteOpen: boolean;\n  selectedServiceAccount: string | null;\n}\n\nconst DeleteServiceAccount = ({\n  closeDeleteModalAndRefresh,\n  deleteOpen,\n  selectedServiceAccount,\n}: IDeleteServiceAccountProps) => {\n  const dispatch = useAppDispatch();\n  const onClose = () => closeDeleteModalAndRefresh(false);\n\n  const [loadingDelete, setLoadingDelete] = useState<boolean>(false);\n\n  if (!selectedServiceAccount) {\n    return null;\n  }\n\n  const onConfirmDelete = () => {\n    setLoadingDelete(true);\n    api.serviceAccounts\n      .deleteServiceAccount(selectedServiceAccount)\n      .then((_) => {\n        closeDeleteModalAndRefresh(true);\n      })\n      .catch(async (res: HttpResponse<void, ApiError>) => {\n        const err = (await res.json()) as ApiError;\n        dispatch(setErrorSnackMessage(errorToHandler(err)));\n        closeDeleteModalAndRefresh(false);\n      })\n      .finally(() => setLoadingDelete(false));\n  };\n\n  return (\n    <ConfirmDialog\n      title={`Delete Access Key`}\n      confirmText={\"Delete\"}\n      isOpen={deleteOpen}\n      titleIcon={<ConfirmDeleteIcon />}\n      isLoading={loadingDelete}\n      onConfirm={onConfirmDelete}\n      onClose={onClose}\n      confirmationContent={\n        <Fragment>\n          Are you sure you want to delete Access Key{\" \"}\n          <b\n            style={{\n              maxWidth: \"200px\",\n              whiteSpace: \"normal\",\n              wordWrap: \"break-word\",\n            }}\n          >\n            {selectedServiceAccount}\n          </b>\n          ?\n        </Fragment>\n      }\n    />\n  );\n};\n\nexport default DeleteServiceAccount;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\n\nimport { Box, DataTable, Grid, ProgressBar } from \"mds\";\nimport { policySort } from \"../../../utils/sortFunctions\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport SearchBox from \"../Common/SearchBox\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\nimport { useSelector } from \"react-redux\";\nimport { api } from \"../../../api\";\n\ninterface ISelectPolicyProps {\n  selectedPolicy?: string[];\n  noTitle?: boolean;\n}\n\nconst PolicySelectors = ({ noTitle = false }: ISelectPolicyProps) => {\n  const dispatch = useAppDispatch();\n  // Local State\n  const [records, setRecords] = useState<any[]>([]);\n  const [loading, isLoading] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string>(\"\");\n\n  const currentPolicies = useSelector(\n    (state: AppState) => state.createUser.selectedPolicies,\n  );\n\n  const fetchPolicies = useCallback(() => {\n    isLoading(true);\n\n    api.policies\n      .listPolicies()\n      .then((res) => {\n        const policies = res.data.policies ?? [];\n        isLoading(false);\n        setRecords(policies.sort(policySort));\n      })\n      .catch((err: ErrorResponseHandler) => {\n        isLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  }, [dispatch]);\n\n  //Effects\n  useEffect(() => {\n    isLoading(true);\n  }, []);\n\n  useEffect(() => {\n    if (loading) {\n      fetchPolicies();\n    }\n  }, [loading, fetchPolicies]);\n\n  const selectionChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const targetD = e.target;\n    const value = targetD.value;\n    const checked = targetD.checked;\n\n    let elements: string[] = [...currentPolicies]; // We clone the checkedUsers array\n\n    if (checked) {\n      // If the user has checked this field we need to push this to checkedUsersList\n      elements.push(value);\n    } else {\n      // User has unchecked this field, we need to remove it from the list\n      elements = elements.filter((element) => element !== value);\n    }\n    // remove empty values\n    elements = elements.filter((element) => element !== \"\");\n\n    dispatch(setSelectedPolicies(elements));\n  };\n\n  const filteredRecords = records.filter((elementItem) =>\n    elementItem.name.includes(filter),\n  );\n\n  return (\n    <Grid item xs={12} className={\"inputItem\"}>\n      {loading && <ProgressBar />}\n      {records.length > 0 ? (\n        <Fragment>\n          <Grid item xs={12} className={\"inputItem\"}>\n            <SearchBox\n              placeholder=\"Start typing to search for a Policy\"\n              onChange={(value) => {\n                setFilter(value);\n              }}\n              value={filter}\n              label={!noTitle ? \"Assign Policies\" : \"\"}\n            />\n          </Grid>\n\n          <DataTable\n            columns={[{ label: \"Policy\", elementKey: \"name\" }]}\n            onSelect={selectionChanged}\n            selectedItems={currentPolicies}\n            isLoading={loading}\n            records={filteredRecords}\n            entityName=\"Policies\"\n            idField=\"name\"\n            customPaperHeight={\"200px\"}\n          />\n        </Fragment>\n      ) : (\n        <Box\n          sx={{\n            textAlign: \"center\",\n            padding: \"10px 0\",\n          }}\n        >\n          No Policies Available\n        </Box>\n      )}\n    </Grid>\n  );\n};\n\nexport default PolicySelectors;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  AddIcon,\n  Button,\n  DeleteIcon,\n  GroupsIcon,\n  HelpBox,\n  PageLayout,\n  UsersIcon,\n  DataTable,\n  Grid,\n  ProgressBar,\n  ActionLink,\n} from \"mds\";\n\nimport { User, UsersList } from \"./types\";\nimport { usersSort } from \"../../../utils/sortFunctions\";\nimport { actionsTray } from \"../Common/FormComponents/common/styleLibrary\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport {\n  addUserToGroupPermissions,\n  CONSOLE_UI_RESOURCE,\n  deleteUserPermissions,\n  IAM_PAGES,\n  IAM_SCOPES,\n  listUsersPermissions,\n  permissionTooltipHelper,\n  S3_ALL_RESOURCES,\n  viewUserPermissions,\n} from \"../../../common/SecureComponent/permissions\";\nimport api from \"../../../common/api\";\nimport SearchBox from \"../Common/SearchBox\";\nimport withSuspense from \"../Common/Components/withSuspense\";\n\nimport {\n  hasPermission,\n  SecureComponent,\n} from \"../../../common/SecureComponent\";\nimport { setErrorSnackMessage, setHelpName } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport TooltipWrapper from \"../Common/TooltipWrapper/TooltipWrapper\";\nimport PageHeaderWrapper from \"../Common/PageHeaderWrapper/PageHeaderWrapper\";\nimport HelpMenu from \"../HelpMenu\";\n\nconst DeleteUser = withSuspense(React.lazy(() => import(\"./DeleteUser\")));\nconst AddToGroup = withSuspense(React.lazy(() => import(\"./BulkAddToGroup\")));\n\nconst ListUsers = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const [records, setRecords] = useState<User[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [deleteOpen, setDeleteOpen] = useState<boolean>(false);\n  const [addGroupOpen, setAddGroupOpen] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string>(\"\");\n  const [checkedUsers, setCheckedUsers] = useState<string[]>([]);\n\n  const displayListUsers = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    listUsersPermissions,\n  );\n\n  const viewUser = hasPermission(CONSOLE_UI_RESOURCE, viewUserPermissions);\n\n  const addUserToGroup = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    addUserToGroupPermissions,\n  );\n\n  const deleteUser = hasPermission(CONSOLE_UI_RESOURCE, deleteUserPermissions);\n\n  const closeDeleteModalAndRefresh = (refresh: boolean) => {\n    setDeleteOpen(false);\n    if (refresh) {\n      setLoading(true);\n      setCheckedUsers([]);\n    }\n  };\n\n  const closeAddGroupBulk = (unCheckAll: boolean = false) => {\n    setAddGroupOpen(false);\n    if (unCheckAll) {\n      setCheckedUsers([]);\n    }\n  };\n\n  useEffect(() => {\n    if (loading) {\n      if (displayListUsers) {\n        api\n          .invoke(\"GET\", `/api/v1/users`)\n          .then((res: UsersList) => {\n            const users = res.users === null ? [] : res.users;\n\n            setLoading(false);\n            setRecords(users.sort(usersSort));\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setLoading(false);\n            dispatch(setErrorSnackMessage(err));\n          });\n      } else {\n        setLoading(false);\n      }\n    }\n  }, [loading, dispatch, displayListUsers]);\n\n  const filteredRecords = records.filter((elementItem) =>\n    elementItem.accessKey.includes(filter),\n  );\n\n  const selectionChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { target: { value = \"\", checked = false } = {} } = e;\n\n    let elements: string[] = [...checkedUsers]; // We clone the checkedUsers array\n\n    if (checked) {\n      // If the user has checked this field we need to push this to checkedUsersList\n      elements.push(value);\n    } else {\n      // User has unchecked this field, we need to remove it from the list\n      elements = elements.filter((element) => element !== value);\n    }\n\n    setCheckedUsers(elements);\n\n    return elements;\n  };\n\n  const viewAction = (selectionElement: any): void => {\n    navigate(\n      `${IAM_PAGES.USERS}/${encodeURIComponent(selectionElement.accessKey)}`,\n    );\n  };\n\n  const tableActions = [\n    {\n      type: \"view\",\n      onClick: viewAction,\n      disableButtonFunction: () => !viewUser,\n    },\n    {\n      type: \"edit\",\n      onClick: viewAction,\n      disableButtonFunction: () => !viewUser,\n    },\n  ];\n\n  useEffect(() => {\n    dispatch(setHelpName(\"list_users\"));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Fragment>\n      {deleteOpen && (\n        <DeleteUser\n          deleteOpen={deleteOpen}\n          selectedUsers={checkedUsers}\n          closeDeleteModalAndRefresh={(refresh: boolean) => {\n            closeDeleteModalAndRefresh(refresh);\n          }}\n        />\n      )}\n      {addGroupOpen && (\n        <AddToGroup\n          open={addGroupOpen}\n          checkedUsers={checkedUsers}\n          closeModalAndRefresh={(close: boolean) => {\n            closeAddGroupBulk(close);\n          }}\n        />\n      )}\n      <PageHeaderWrapper label={\"Users\"} actions={<HelpMenu />} />\n\n      <PageLayout>\n        <Grid container>\n          <Grid item xs={12} sx={actionsTray.actionsTray}>\n            <SearchBox\n              placeholder={\"Search Users\"}\n              onChange={setFilter}\n              value={filter}\n              sx={{\n                marginRight: \"auto\",\n                maxWidth: 380,\n              }}\n            />\n            <SecureComponent\n              resource={CONSOLE_UI_RESOURCE}\n              scopes={[IAM_SCOPES.ADMIN_DELETE_USER]}\n              matchAll\n              errorProps={{ disabled: true }}\n            >\n              <TooltipWrapper\n                tooltip={\n                  hasPermission(\"console\", [IAM_SCOPES.ADMIN_DELETE_USER])\n                    ? checkedUsers.length === 0\n                      ? \"Select Users to delete\"\n                      : \"Delete Selected\"\n                    : permissionTooltipHelper(\n                        [IAM_SCOPES.ADMIN_DELETE_USER],\n                        \"delete users\",\n                      )\n                }\n              >\n                <Button\n                  id={\"delete-selected-users\"}\n                  onClick={() => {\n                    setDeleteOpen(true);\n                  }}\n                  label={\"Delete Selected\"}\n                  icon={<DeleteIcon />}\n                  disabled={checkedUsers.length === 0}\n                  variant={\"secondary\"}\n                  aria-label=\"delete-selected-users\"\n                />\n              </TooltipWrapper>\n            </SecureComponent>\n            <SecureComponent\n              scopes={[IAM_SCOPES.ADMIN_ADD_USER_TO_GROUP]}\n              resource={CONSOLE_UI_RESOURCE}\n              errorProps={{ disabled: true }}\n            >\n              <TooltipWrapper\n                tooltip={\n                  hasPermission(\"console\", [IAM_SCOPES.ADMIN_ADD_USER_TO_GROUP])\n                    ? checkedUsers.length === 0\n                      ? \"Select Users to group\"\n                      : \"Add to Group\"\n                    : permissionTooltipHelper(\n                        [IAM_SCOPES.ADMIN_ADD_USER_TO_GROUP],\n                        \"add users to groups\",\n                      )\n                }\n              >\n                <Button\n                  id={\"add-to-group\"}\n                  label={\"Add to Group\"}\n                  icon={<GroupsIcon />}\n                  disabled={checkedUsers.length <= 0}\n                  onClick={() => {\n                    if (checkedUsers.length > 0) {\n                      setAddGroupOpen(true);\n                    }\n                  }}\n                  variant={\"regular\"}\n                />\n              </TooltipWrapper>\n            </SecureComponent>\n            <SecureComponent\n              scopes={[\n                IAM_SCOPES.ADMIN_CREATE_USER,\n                IAM_SCOPES.ADMIN_LIST_USER_POLICIES,\n                IAM_SCOPES.ADMIN_LIST_GROUPS,\n              ]}\n              resource={S3_ALL_RESOURCES}\n              matchAll\n              errorProps={{ disabled: true }}\n            >\n              <TooltipWrapper\n                tooltip={\n                  hasPermission(\n                    \"console-ui\",\n                    [\n                      IAM_SCOPES.ADMIN_CREATE_USER,\n                      IAM_SCOPES.ADMIN_LIST_USER_POLICIES,\n                      IAM_SCOPES.ADMIN_LIST_GROUPS,\n                      IAM_SCOPES.ADMIN_ATTACH_USER_OR_GROUP_POLICY,\n                    ],\n                    true,\n                  )\n                    ? \"Create User\"\n                    : permissionTooltipHelper(\n                        [\n                          IAM_SCOPES.ADMIN_CREATE_USER,\n                          IAM_SCOPES.ADMIN_LIST_USER_POLICIES,\n                          IAM_SCOPES.ADMIN_LIST_GROUPS,\n                          IAM_SCOPES.ADMIN_ATTACH_USER_OR_GROUP_POLICY,\n                        ],\n                        \"create users\",\n                      )\n                }\n              >\n                <Button\n                  id={\"create-user\"}\n                  label={\"Create User\"}\n                  icon={<AddIcon />}\n                  onClick={() => {\n                    navigate(`${IAM_PAGES.USER_ADD}`);\n                  }}\n                  variant={\"callAction\"}\n                  disabled={\n                    !hasPermission(\n                      \"console-ui\",\n                      [\n                        IAM_SCOPES.ADMIN_CREATE_USER,\n                        IAM_SCOPES.ADMIN_LIST_USER_POLICIES,\n                        IAM_SCOPES.ADMIN_LIST_GROUPS,\n                        IAM_SCOPES.ADMIN_ATTACH_USER_OR_GROUP_POLICY,\n                      ],\n                      true,\n                    )\n                  }\n                />\n              </TooltipWrapper>\n            </SecureComponent>\n          </Grid>\n\n          {loading && <ProgressBar />}\n          {!loading && (\n            <Fragment>\n              {records.length > 0 && (\n                <Fragment>\n                  <Grid item xs={12} sx={{ marginBottom: 15 }}>\n                    <SecureComponent\n                      scopes={[IAM_SCOPES.ADMIN_LIST_USERS]}\n                      resource={CONSOLE_UI_RESOURCE}\n                      errorProps={{ disabled: true }}\n                    >\n                      <DataTable\n                        itemActions={tableActions}\n                        columns={[\n                          { label: \"Access Key\", elementKey: \"accessKey\" },\n                        ]}\n                        onSelect={\n                          addUserToGroup || deleteUser\n                            ? selectionChanged\n                            : undefined\n                        }\n                        selectedItems={checkedUsers}\n                        isLoading={loading}\n                        records={filteredRecords}\n                        entityName=\"Users\"\n                        idField=\"accessKey\"\n                      />\n                    </SecureComponent>\n                  </Grid>\n                  <HelpBox\n                    title={\"Users\"}\n                    iconComponent={<UsersIcon />}\n                    help={\n                      <Fragment>\n                        A MinIO user consists of a unique access key (username)\n                        and corresponding secret key (password). Clients must\n                        authenticate their identity by specifying both a valid\n                        access key (username) and the corresponding secret key\n                        (password) of an existing MinIO user.\n                        <br />\n                        Groups provide a simplified method for managing shared\n                        permissions among users with common access patterns and\n                        workloads.\n                        <br />\n                        <br />\n                        Users inherit access permissions to data and resources\n                        through the groups they belong to.\n                        <br />\n                        MinIO uses Policy-Based Access Control (PBAC) to define\n                        the authorized actions and resources to which an\n                        authenticated user has access. Each policy describes one\n                        or more actions and conditions that outline the\n                        permissions of a user or group of users.\n                        <br />\n                        <br />\n                        Each user can access only those resources and operations\n                        which are explicitly granted by the built-in role. MinIO\n                        denies access to any other resource or action by\n                        default.\n                        <br />\n                        <br />\n                        You can learn more at our{\" \"}\n                        <a\n                          href=\"https://min.io/docs/minio/kubernetes/upstream/administration/identity-access-management/minio-user-management.html?ref=con\"\n                          target=\"_blank\"\n                          rel=\"noopener\"\n                        >\n                          documentation\n                        </a>\n                        .\n                      </Fragment>\n                    }\n                  />\n                </Fragment>\n              )}\n              {records.length === 0 && (\n                <Grid container>\n                  <Grid item xs={8}>\n                    <HelpBox\n                      title={\"Users\"}\n                      iconComponent={<UsersIcon />}\n                      help={\n                        <Fragment>\n                          A MinIO user consists of a unique access key\n                          (username) and corresponding secret key (password).\n                          Clients must authenticate their identity by specifying\n                          both a valid access key (username) and the\n                          corresponding secret key (password) of an existing\n                          MinIO user.\n                          <br />\n                          Groups provide a simplified method for managing shared\n                          permissions among users with common access patterns\n                          and workloads.\n                          <br />\n                          <br />\n                          Users inherit access permissions to data and resources\n                          through the groups they belong to.\n                          <br />\n                          MinIO uses Policy-Based Access Control (PBAC) to\n                          define the authorized actions and resources to which\n                          an authenticated user has access. Each policy\n                          describes one or more actions and conditions that\n                          outline the permissions of a user or group of users.\n                          <br />\n                          <br />\n                          Each user can access only those resources and\n                          operations which are explicitly granted by the\n                          built-in role. MinIO denies access to any other\n                          resource or action by default.\n                          <SecureComponent\n                            scopes={[\n                              IAM_SCOPES.ADMIN_CREATE_USER,\n                              IAM_SCOPES.ADMIN_LIST_USER_POLICIES,\n                              IAM_SCOPES.ADMIN_LIST_GROUPS,\n                            ]}\n                            matchAll\n                            resource={CONSOLE_UI_RESOURCE}\n                          >\n                            <br />\n                            <br />\n                            To get started,{\" \"}\n                            <ActionLink\n                              onClick={() => {\n                                navigate(`${IAM_PAGES.USER_ADD}`);\n                              }}\n                            >\n                              Create a User\n                            </ActionLink>\n                            .\n                          </SecureComponent>\n                        </Fragment>\n                      }\n                    />\n                  </Grid>\n                </Grid>\n              )}\n            </Fragment>\n          )}\n        </Grid>\n      </PageLayout>\n    </Fragment>\n  );\n};\n\nexport default ListUsers;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState, Fragment } from \"react\";\n\nimport {\n  AddMembersToGroupIcon,\n  Button,\n  FormLayout,\n  Grid,\n  Box,\n  ProgressBar,\n} from \"mds\";\nimport { modalStyleUtils } from \"../Common/FormComponents/common/styleLibrary\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport api from \"../../../common/api\";\nimport GroupsSelectors from \"./GroupsSelectors\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\n\ninterface IChangeUserGroupsContentProps {\n  closeModalAndRefresh: () => void;\n  selectedUser: string;\n  open: boolean;\n}\n\nconst ChangeUserGroups = ({\n  closeModalAndRefresh,\n  selectedUser,\n  open,\n}: IChangeUserGroupsContentProps) => {\n  const dispatch = useAppDispatch();\n  const [addLoading, setAddLoading] = useState<boolean>(false);\n  const [accessKey, setAccessKey] = useState<string>(\"\");\n  const [secretKey, setSecretKey] = useState<string>(\"\");\n  const [enabled, setEnabled] = useState<boolean>(false);\n  const [selectedGroups, setSelectedGroups] = useState<string[]>([]);\n\n  const getUserInformation = useCallback(() => {\n    if (!selectedUser) {\n      return null;\n    }\n\n    api\n      .invoke(\"GET\", `/api/v1/user/${encodeURIComponent(selectedUser)}`)\n      .then((res) => {\n        setAddLoading(false);\n        setAccessKey(res.accessKey);\n        setSelectedGroups(res.memberOf || []);\n        setEnabled(res.status === \"enabled\");\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setAddLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  }, [selectedUser, dispatch]);\n\n  useEffect(() => {\n    if (selectedUser === null) {\n      setAccessKey(\"\");\n      setSecretKey(\"\");\n      setSelectedGroups([]);\n    } else {\n      getUserInformation();\n    }\n  }, [selectedUser, getUserInformation]);\n\n  const saveRecord = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (addLoading) {\n      return;\n    }\n    setAddLoading(true);\n    if (selectedUser !== null) {\n      api\n        .invoke(\"PUT\", `/api/v1/user/${encodeURIComponent(selectedUser)}`, {\n          status: enabled ? \"enabled\" : \"disabled\",\n          groups: selectedGroups,\n        })\n        .then((_) => {\n          setAddLoading(false);\n          closeModalAndRefresh();\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setAddLoading(false);\n          dispatch(setModalErrorSnackMessage(err));\n        });\n    } else {\n      api\n        .invoke(\"POST\", \"/api/v1/users\", {\n          accessKey,\n          secretKey,\n          groups: selectedGroups,\n        })\n        .then((_) => {\n          setAddLoading(false);\n          closeModalAndRefresh();\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setAddLoading(false);\n          dispatch(setModalErrorSnackMessage(err));\n        });\n    }\n  };\n\n  const resetForm = () => {\n    if (selectedUser !== null) {\n      setSelectedGroups([]);\n      return;\n    }\n    setAccessKey(\"\");\n    setSecretKey(\"\");\n    setSelectedGroups([]);\n  };\n\n  const sendEnabled =\n    accessKey.trim() !== \"\" &&\n    ((secretKey.trim() !== \"\" && selectedUser === null) ||\n      selectedUser !== null);\n  return (\n    <ModalWrapper\n      onClose={() => {\n        closeModalAndRefresh();\n      }}\n      modalOpen={open}\n      title={\"Set Groups\"}\n      titleIcon={<AddMembersToGroupIcon />}\n    >\n      <Fragment>\n        <form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n            saveRecord(e);\n          }}\n        >\n          <FormLayout withBorders={false} containerPadding={false}>\n            <GroupsSelectors\n              selectedGroups={selectedGroups}\n              setSelectedGroups={(elements: string[]) => {\n                setSelectedGroups(elements);\n              }}\n            />\n          </FormLayout>\n          <Box sx={modalStyleUtils.modalButtonBar}>\n            <Button\n              id={\"clear-change-user-groups\"}\n              type=\"button\"\n              variant=\"regular\"\n              onClick={resetForm}\n              label={\"Clear\"}\n            />\n\n            <Button\n              id={\"save-user-groups\"}\n              type=\"submit\"\n              variant=\"callAction\"\n              disabled={addLoading || !sendEnabled}\n              label={\"Save\"}\n            />\n          </Box>\n          {addLoading && (\n            <Grid item xs={12}>\n              <ProgressBar />\n            </Grid>\n          )}\n        </form>\n      </Fragment>\n    </ModalWrapper>\n  );\n};\n\nexport default ChangeUserGroups;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport {\n  Box,\n  Button,\n  FormLayout,\n  IAMPoliciesIcon,\n  ProgressBar,\n  Grid,\n} from \"mds\";\nimport { useSelector } from \"react-redux\";\nimport { modalStyleUtils } from \"../Common/FormComponents/common/styleLibrary\";\nimport { IPolicyItem } from \"../Users/types\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport { setSelectedPolicies } from \"./AddUsersSlice\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\nimport api from \"../../../common/api\";\nimport PolicySelectors from \"../Policies/PolicySelectors\";\n\ninterface ISetUserPoliciesProps {\n  closeModalAndRefresh: () => void;\n  selectedUser: string;\n  currentPolicies: IPolicyItem[];\n  open: boolean;\n}\n\nconst SetUserPolicies = ({\n  closeModalAndRefresh,\n  selectedUser,\n  currentPolicies,\n  open,\n}: ISetUserPoliciesProps) => {\n  const dispatch = useAppDispatch();\n  //Local States\n  const [loading, setLoading] = useState<boolean>(false);\n  const [actualPolicy, setActualPolicy] = useState<string[]>([]);\n\n  const statePolicies = useSelector(\n    (state: AppState) => state.createUser.selectedPolicies,\n  );\n\n  const SetUserPoliciesAction = () => {\n    let entity = \"user\";\n    let value = selectedUser;\n\n    setLoading(true);\n\n    api\n      .invoke(\"PUT\", `/api/v1/set-policy`, {\n        name: statePolicies,\n        entityName: value,\n        entityType: entity,\n      })\n      .then(() => {\n        setLoading(false);\n        dispatch(setSelectedPolicies([]));\n        closeModalAndRefresh();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  };\n\n  const resetSelection = () => {\n    dispatch(setSelectedPolicies(actualPolicy));\n  };\n\n  useEffect(() => {\n    if (open) {\n      const userPolicy: string[] = currentPolicies.map((pol) => {\n        return pol.policy;\n      });\n      setActualPolicy(userPolicy);\n      dispatch(setSelectedPolicies(userPolicy));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open, selectedUser]);\n\n  return (\n    <ModalWrapper\n      onClose={() => {\n        closeModalAndRefresh();\n      }}\n      modalOpen={open}\n      title=\"Set Policies\"\n      titleIcon={<IAMPoliciesIcon />}\n    >\n      <FormLayout withBorders={false} containerPadding={false}>\n        <PolicySelectors selectedPolicy={statePolicies} />\n      </FormLayout>\n      <Box sx={modalStyleUtils.modalButtonBar}>\n        <Button\n          id={\"reset-user-policies\"}\n          type=\"button\"\n          variant=\"regular\"\n          color=\"primary\"\n          onClick={resetSelection}\n          label={\"Reset\"}\n        />\n        <Button\n          id={\"save-user-policy\"}\n          type=\"button\"\n          variant=\"callAction\"\n          color=\"primary\"\n          disabled={loading}\n          onClick={SetUserPoliciesAction}\n          label={\"Save\"}\n        />\n      </Box>\n      {loading && (\n        <Grid item xs={12}>\n          <ProgressBar />\n        </Grid>\n      )}\n    </ModalWrapper>\n  );\n};\n\nexport default SetUserPolicies;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { AddIcon, Box, Button, DataTable, DeleteIcon, SectionTitle } from \"mds\";\nimport api from \"../../../common/api\";\nimport { NewServiceAccount } from \"../Common/CredentialsPrompt/types\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport DeleteServiceAccount from \"../Account/DeleteServiceAccount\";\nimport CredentialsPrompt from \"../Common/CredentialsPrompt/CredentialsPrompt\";\n\nimport DeleteMultipleServiceAccounts from \"./DeleteMultipleServiceAccounts\";\nimport { selectSAs } from \"../Configurations/utils\";\nimport EditServiceAccount from \"../Account/EditServiceAccount\";\nimport {\n  CONSOLE_UI_RESOURCE,\n  IAM_SCOPES,\n} from \"../../../common/SecureComponent/permissions\";\nimport { SecureComponent } from \"../../../common/SecureComponent\";\nimport {\n  setErrorSnackMessage,\n  setHelpName,\n  setSnackBarMessage,\n} from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport TooltipWrapper from \"../Common/TooltipWrapper/TooltipWrapper\";\nimport { ServiceAccounts } from \"../../../api/consoleApi\";\nimport { usersSort } from \"../../../utils/sortFunctions\";\nimport { ACCOUNT_TABLE_COLUMNS } from \"../Account/AccountUtils\";\n\ninterface IUserServiceAccountsProps {\n  user: string;\n  hasPolicy: boolean;\n}\n\nconst UserServiceAccountsPanel = ({\n  user,\n  hasPolicy,\n}: IUserServiceAccountsProps) => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const [records, setRecords] = useState<ServiceAccounts>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [deleteOpen, setDeleteOpen] = useState<boolean>(false);\n  const [selectedServiceAccount, setSelectedServiceAccount] = useState<\n    string | null\n  >(null);\n  const [showNewCredentials, setShowNewCredentials] = useState<boolean>(false);\n  const [newServiceAccount, setNewServiceAccount] =\n    useState<NewServiceAccount | null>(null);\n  const [selectedSAs, setSelectedSAs] = useState<string[]>([]);\n  const [deleteMultipleOpen, setDeleteMultipleOpen] = useState<boolean>(false);\n  const [editOpen, setEditOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    fetchRecords();\n  }, []);\n\n  useEffect(() => {\n    if (loading) {\n      api\n        .invoke(\n          \"GET\",\n          `/api/v1/user/${encodeURIComponent(user)}/service-accounts`,\n        )\n        .then((res: ServiceAccounts) => {\n          setLoading(false);\n          const sortedRows = res.sort(usersSort);\n          setRecords(sortedRows);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          dispatch(setErrorSnackMessage(err));\n          setLoading(false);\n        });\n    }\n  }, [loading, setLoading, setRecords, user, dispatch]);\n\n  const fetchRecords = () => {\n    setLoading(true);\n  };\n\n  const closeDeleteModalAndRefresh = (refresh: boolean) => {\n    setDeleteOpen(false);\n\n    if (refresh) {\n      fetchRecords();\n    }\n  };\n\n  const closeDeleteMultipleModalAndRefresh = (refresh: boolean) => {\n    setDeleteMultipleOpen(false);\n    if (refresh) {\n      dispatch(setSnackBarMessage(`Access Keys deleted successfully.`));\n      setSelectedSAs([]);\n      setLoading(true);\n    }\n  };\n\n  const closeCredentialsModal = () => {\n    setShowNewCredentials(false);\n    setNewServiceAccount(null);\n  };\n\n  const editModalOpen = (selectedServiceAccount: string) => {\n    setSelectedServiceAccount(selectedServiceAccount);\n    setEditOpen(true);\n  };\n\n  const confirmDeleteServiceAccount = (selectedServiceAccount: string) => {\n    setSelectedServiceAccount(selectedServiceAccount);\n    setDeleteOpen(true);\n  };\n\n  const closePolicyModal = () => {\n    setEditOpen(false);\n    setLoading(true);\n  };\n\n  const tableActions = [\n    {\n      type: \"view\",\n      onClick: (value: any) => {\n        if (value) {\n          editModalOpen(value.accessKey);\n        }\n      },\n    },\n    {\n      type: \"delete\",\n      onClick: (value: any) => {\n        if (value) {\n          confirmDeleteServiceAccount(value.accessKey);\n        }\n      },\n    },\n    {\n      type: \"edit\",\n      onClick: (value: any) => {\n        if (value) {\n          editModalOpen(value.accessKey);\n        }\n      },\n    },\n  ];\n\n  useEffect(() => {\n    dispatch(setHelpName(\"user_details_accounts\"));\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return (\n    <Fragment>\n      {deleteOpen && (\n        <DeleteServiceAccount\n          deleteOpen={deleteOpen}\n          selectedServiceAccount={selectedServiceAccount}\n          closeDeleteModalAndRefresh={(refresh: boolean) => {\n            closeDeleteModalAndRefresh(refresh);\n          }}\n        />\n      )}\n      {deleteMultipleOpen && (\n        <DeleteMultipleServiceAccounts\n          deleteOpen={deleteMultipleOpen}\n          selectedSAs={selectedSAs}\n          closeDeleteModalAndRefresh={closeDeleteMultipleModalAndRefresh}\n        />\n      )}\n      {showNewCredentials && (\n        <CredentialsPrompt\n          newServiceAccount={newServiceAccount}\n          open={showNewCredentials}\n          closeModal={() => {\n            closeCredentialsModal();\n          }}\n          entity=\"Access Key\"\n        />\n      )}\n      {editOpen && (\n        <EditServiceAccount\n          open={editOpen}\n          selectedAccessKey={selectedServiceAccount}\n          closeModalAndRefresh={closePolicyModal}\n        />\n      )}\n\n      <SectionTitle\n        separator\n        sx={{ marginBottom: 15 }}\n        actions={\n          <Box sx={{ display: \"flex\", justifyContent: \"flex-end\", gap: 10 }}>\n            <TooltipWrapper tooltip={\"Delete Selected\"}>\n              <Button\n                id={\"delete-selected\"}\n                onClick={() => {\n                  setDeleteMultipleOpen(true);\n                }}\n                label={\"Delete Selected\"}\n                icon={<DeleteIcon />}\n                disabled={selectedSAs.length === 0}\n                variant={\"secondary\"}\n              />\n            </TooltipWrapper>\n            <SecureComponent\n              scopes={[\n                IAM_SCOPES.ADMIN_CREATE_SERVICEACCOUNT,\n                IAM_SCOPES.ADMIN_UPDATE_SERVICEACCOUNT,\n                IAM_SCOPES.ADMIN_REMOVE_SERVICEACCOUNT,\n                IAM_SCOPES.ADMIN_LIST_SERVICEACCOUNTS,\n              ]}\n              resource={CONSOLE_UI_RESOURCE}\n              matchAll\n              errorProps={{ disabled: true }}\n            >\n              <TooltipWrapper tooltip={\"Create Access Key\"}>\n                <Button\n                  id={\"create-service-account\"}\n                  label={\"Create Access Key\"}\n                  variant=\"callAction\"\n                  icon={<AddIcon />}\n                  onClick={() => {\n                    navigate(\n                      `/identity/users/new-user-sa/${encodeURIComponent(user)}`,\n                    );\n                  }}\n                  disabled={!hasPolicy}\n                />\n              </TooltipWrapper>\n            </SecureComponent>\n          </Box>\n        }\n      >\n        Access Keys\n      </SectionTitle>\n\n      <DataTable\n        itemActions={tableActions}\n        entityName={\"Access Keys\"}\n        columns={ACCOUNT_TABLE_COLUMNS}\n        onSelect={(e) => selectSAs(e, setSelectedSAs, selectedSAs)}\n        selectedItems={selectedSAs}\n        isLoading={loading}\n        records={records}\n        idField=\"accessKey\"\n      />\n    </Fragment>\n  );\n};\n\nexport default UserServiceAccountsPanel;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport {\n  Box,\n  Button,\n  ChangePasswordIcon,\n  FormLayout,\n  InputBox,\n  ProgressBar,\n} from \"mds\";\nimport { modalStyleUtils } from \"../Common/FormComponents/common/styleLibrary\";\nimport {\n  setErrorSnackMessage,\n  setModalErrorSnackMessage,\n  setSnackBarMessage,\n} from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport { api } from \"api\";\nimport { ApiError, ChangeUserPasswordRequest } from \"api/consoleApi\";\nimport { errorToHandler } from \"api/errors\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\n\ninterface IChangeUserPasswordProps {\n  open: boolean;\n  userName: string;\n  closeModal: () => void;\n}\n\nconst ChangeUserPassword = ({\n  open,\n  userName,\n  closeModal,\n}: IChangeUserPasswordProps) => {\n  const dispatch = useAppDispatch();\n  const [newPassword, setNewPassword] = useState<string>(\"\");\n  const [reNewPassword, setReNewPassword] = useState<string>(\"\");\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const changeUserPassword = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (loading) {\n      return;\n    }\n    setLoading(true);\n\n    if (newPassword.length < 8) {\n      dispatch(\n        setModalErrorSnackMessage({\n          errorMessage: \"Passwords must be at least 8 characters long\",\n          detailedError: \"\",\n        }),\n      );\n      setLoading(false);\n      return;\n    }\n\n    let request: ChangeUserPasswordRequest = {\n      selectedUser: userName,\n      newSecretKey: newPassword,\n    };\n\n    api.account\n      .changeUserPassword(request)\n      .then((res) => {\n        setLoading(false);\n        setNewPassword(\"\");\n        setReNewPassword(\"\");\n        dispatch(\n          setSnackBarMessage(\n            `Successfully updated the password for the user ${userName}.`,\n          ),\n        );\n        closeModal();\n      })\n      .catch(async (res) => {\n        setLoading(false);\n        setNewPassword(\"\");\n        setReNewPassword(\"\");\n        const err = (await res.json()) as ApiError;\n        dispatch(setErrorSnackMessage(errorToHandler(err)));\n      });\n  };\n\n  return open ? (\n    <ModalWrapper\n      title=\"Change User Password\"\n      modalOpen={open}\n      onClose={() => {\n        setNewPassword(\"\");\n        setReNewPassword(\"\");\n        closeModal();\n      }}\n      titleIcon={<ChangePasswordIcon />}\n    >\n      <form\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n          changeUserPassword(e);\n        }}\n      >\n        <FormLayout withBorders={false} containerPadding={false}>\n          <Box sx={{ margin: \"10px 0 20px\" }}>\n            Change password for: <strong>{userName}</strong>\n          </Box>\n          <InputBox\n            id=\"new-password\"\n            name=\"new-password\"\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              setNewPassword(event.target.value);\n            }}\n            label=\"New Password\"\n            type=\"password\"\n            value={newPassword}\n          />\n          <InputBox\n            id=\"re-new-password\"\n            name=\"re-new-password\"\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              setReNewPassword(event.target.value);\n            }}\n            label=\"Type New Password Again\"\n            type=\"password\"\n            value={reNewPassword}\n          />\n          <Box sx={modalStyleUtils.modalButtonBar}>\n            <Button\n              id={\"save-user-password\"}\n              type=\"submit\"\n              variant=\"callAction\"\n              color=\"primary\"\n              disabled={\n                loading ||\n                !(reNewPassword.length > 0 && newPassword === reNewPassword)\n              }\n              label={\"Save\"}\n            />\n          </Box>\n          {loading && (\n            <Box>\n              <ProgressBar />\n            </Box>\n          )}\n        </FormLayout>\n      </form>\n    </ModalWrapper>\n  ) : null;\n};\n\nexport default ChangeUserPassword;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport {\n  AddIcon,\n  BackLink,\n  Box,\n  Button,\n  DataTable,\n  Grid,\n  IAMPoliciesIcon,\n  PageLayout,\n  PasswordKeyIcon,\n  ScreenTitle,\n  SectionTitle,\n  Switch,\n  Tabs,\n  TrashIcon,\n  UsersIcon,\n} from \"mds\";\nimport { IPolicyItem } from \"./types\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport { setHelpName, setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport {\n  assignGroupPermissions,\n  assignIAMPolicyPermissions,\n  CONSOLE_UI_RESOURCE,\n  deleteUserPermissions,\n  disableUserPermissions,\n  editServiceAccountPermissions,\n  enableDisableUserPermissions,\n  enableUserPermissions,\n  getGroupPermissions,\n  IAM_PAGES,\n  permissionTooltipHelper,\n} from \"../../../common/SecureComponent/permissions\";\nimport { hasPermission } from \"../../../common/SecureComponent\";\nimport { useAppDispatch } from \"../../../store\";\nimport { policyDetailsSort } from \"../../../utils/sortFunctions\";\nimport TooltipWrapper from \"../Common/TooltipWrapper/TooltipWrapper\";\nimport PageHeaderWrapper from \"../Common/PageHeaderWrapper/PageHeaderWrapper\";\nimport HelpMenu from \"../HelpMenu\";\nimport api from \"../../../common/api\";\nimport ChangeUserGroups from \"./ChangeUserGroups\";\nimport SetUserPolicies from \"./SetUserPolicies\";\nimport UserServiceAccountsPanel from \"./UserServiceAccountsPanel\";\nimport ChangeUserPasswordModal from \"../Account/ChangeUserPasswordModal\";\nimport DeleteUser from \"./DeleteUser\";\n\ninterface IGroupItem {\n  group: string;\n}\n\nconst UserDetails = () => {\n  const dispatch = useAppDispatch();\n  const params = useParams();\n  const navigate = useNavigate();\n\n  const [loading, setLoading] = useState<boolean>(false);\n  const [addGroupOpen, setAddGroupOpen] = useState<boolean>(false);\n  const [policyOpen, setPolicyOpen] = useState<boolean>(false);\n  const [addLoading, setAddLoading] = useState<boolean>(false);\n  const [enabled, setEnabled] = useState<boolean>(false);\n  const [selectedGroups, setSelectedGroups] = useState<string[]>([]);\n  const [currentGroups, setCurrentGroups] = useState<IGroupItem[]>([]);\n  const [currentPolicies, setCurrentPolicies] = useState<IPolicyItem[]>([]);\n  const [changeUserPasswordModalOpen, setChangeUserPasswordModalOpen] =\n    useState<boolean>(false);\n  const [deleteOpen, setDeleteOpen] = useState<boolean>(false);\n  const [hasPolicy, setHasPolicy] = useState<boolean>(false);\n  const [selectedTab, setSelectedTab] = useState<string>(\"groups\");\n\n  const enableEnabled =\n    hasPermission(CONSOLE_UI_RESOURCE, enableUserPermissions) && !enabled;\n  const disableEnabled =\n    hasPermission(CONSOLE_UI_RESOURCE, disableUserPermissions) && enabled;\n\n  const userName = params.userName || \"\";\n\n  const changeUserPassword = () => {\n    setChangeUserPasswordModalOpen(true);\n  };\n\n  const deleteUser = () => {\n    setDeleteOpen(true);\n  };\n\n  const userLoggedIn = localStorage.getItem(\"userLoggedIn\") || \"\";\n  const canAssignPolicy = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    assignIAMPolicyPermissions,\n    true,\n  );\n  const canAssignGroup = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    assignGroupPermissions,\n    true,\n  );\n\n  const viewGroup = hasPermission(CONSOLE_UI_RESOURCE, getGroupPermissions);\n\n  const getUserInformation = useCallback(() => {\n    if (userName === \"\") {\n      return null;\n    }\n    setLoading(true);\n    api\n      .invoke(\"GET\", `/api/v1/user/${encodeURIComponent(userName)}`)\n      .then((res) => {\n        setAddLoading(false);\n        const memberOf = res.memberOf || [];\n        setSelectedGroups(memberOf);\n\n        const currentGroups: IGroupItem[] = memberOf.map((group: string) => {\n          return {\n            group: group,\n          };\n        });\n\n        setCurrentGroups(currentGroups);\n        const currentPolicies: IPolicyItem[] = res.policy.map(\n          (policy: string) => {\n            return {\n              policy: policy,\n            };\n          },\n        );\n\n        currentPolicies.sort(policyDetailsSort);\n\n        setCurrentPolicies(currentPolicies);\n        setEnabled(res.status === \"enabled\");\n        setHasPolicy(res.hasPolicy);\n        setLoading(false);\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setAddLoading(false);\n        setLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  }, [userName, dispatch]);\n\n  const saveRecord = (isEnabled: boolean) => {\n    if (addLoading) {\n      return;\n    }\n    setAddLoading(true);\n    api\n      .invoke(\"PUT\", `/api/v1/user/${encodeURIComponent(userName)}`, {\n        status: isEnabled ? \"enabled\" : \"disabled\",\n        groups: selectedGroups,\n      })\n      .then((_) => {\n        setAddLoading(false);\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setAddLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  };\n\n  useEffect(() => {\n    dispatch(setHelpName(\"user_details_groups\"));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    getUserInformation();\n  }, [getUserInformation]);\n\n  const closeDeleteModalAndRefresh = (refresh: boolean) => {\n    setDeleteOpen(false);\n    if (refresh) {\n      getUserInformation();\n    }\n  };\n\n  const groupViewAction = (group: any) => {\n    navigate(`${IAM_PAGES.GROUPS}/${encodeURIComponent(group.group)}`);\n  };\n\n  const groupTableActions = [\n    {\n      type: \"view\",\n      onClick: groupViewAction,\n      disableButtonFunction: () => !viewGroup,\n    },\n  ];\n\n  return (\n    <Fragment>\n      {addGroupOpen && (\n        <ChangeUserGroups\n          open={addGroupOpen}\n          selectedUser={userName}\n          closeModalAndRefresh={() => {\n            setAddGroupOpen(false);\n            getUserInformation();\n          }}\n        />\n      )}\n      {policyOpen && (\n        <SetUserPolicies\n          open={policyOpen}\n          selectedUser={userName}\n          currentPolicies={currentPolicies}\n          closeModalAndRefresh={() => {\n            setPolicyOpen(false);\n            getUserInformation();\n          }}\n        />\n      )}\n      {deleteOpen && (\n        <DeleteUser\n          deleteOpen={deleteOpen}\n          selectedUsers={[userName]}\n          closeDeleteModalAndRefresh={(refresh: boolean) => {\n            closeDeleteModalAndRefresh(refresh);\n          }}\n        />\n      )}\n      {changeUserPasswordModalOpen && (\n        <ChangeUserPasswordModal\n          open={changeUserPasswordModalOpen}\n          userName={userName}\n          closeModal={() => setChangeUserPasswordModalOpen(false)}\n        />\n      )}\n      <PageHeaderWrapper\n        label={\n          <Fragment>\n            <BackLink\n              label={\"Users\"}\n              onClick={() => navigate(IAM_PAGES.USERS)}\n            />\n          </Fragment>\n        }\n        actions={<HelpMenu />}\n      />\n      <PageLayout>\n        <Grid container>\n          <Grid item xs={12}>\n            <ScreenTitle\n              icon={<UsersIcon width={40} />}\n              title={userName}\n              subTitle={\"\"}\n              actions={\n                <Fragment>\n                  <span\n                    style={{\n                      fontSize: \".8rem\",\n                      marginRight: \".5rem\",\n                    }}\n                  >\n                    User Status:\n                  </span>\n                  <span\n                    style={{\n                      fontWeight: \"bold\",\n                      fontSize: \".9rem\",\n                      marginRight: \".5rem\",\n                    }}\n                  >\n                    {enabled ? \"Enabled\" : \"Disabled\"}\n                  </span>\n                  <TooltipWrapper\n                    tooltip={\n                      enableEnabled || disableEnabled\n                        ? \"\"\n                        : hasPermission(\n                              CONSOLE_UI_RESOURCE,\n                              enableUserPermissions,\n                            )\n                          ? permissionTooltipHelper(\n                              disableUserPermissions,\n                              \"disable users\",\n                            )\n                          : hasPermission(\n                                CONSOLE_UI_RESOURCE,\n                                disableUserPermissions,\n                              )\n                            ? permissionTooltipHelper(\n                                enableUserPermissions,\n                                \"enable users\",\n                              )\n                            : permissionTooltipHelper(\n                                enableDisableUserPermissions,\n                                \"enable or disable users\",\n                              )\n                    }\n                  >\n                    <Switch\n                      indicatorLabels={[\"Enabled\", \"Disabled\"]}\n                      checked={enabled}\n                      value={\"group_enabled\"}\n                      id=\"group-status\"\n                      name=\"group-status\"\n                      onChange={() => {\n                        setEnabled(!enabled);\n                        saveRecord(!enabled);\n                      }}\n                      switchOnly\n                      disabled={!enableEnabled && !disableEnabled}\n                    />\n                  </TooltipWrapper>\n                  <TooltipWrapper\n                    tooltip={\n                      hasPermission(CONSOLE_UI_RESOURCE, deleteUserPermissions)\n                        ? userLoggedIn === userName\n                          ? \"You cannot delete the currently logged in User\"\n                          : \"Delete User\"\n                        : permissionTooltipHelper(\n                            deleteUserPermissions,\n                            \"delete user\",\n                          )\n                    }\n                  >\n                    <Button\n                      id={\"delete-user\"}\n                      onClick={deleteUser}\n                      icon={<TrashIcon />}\n                      variant={\"secondary\"}\n                      disabled={\n                        !hasPermission(\n                          CONSOLE_UI_RESOURCE,\n                          deleteUserPermissions,\n                        ) || userLoggedIn === userName\n                      }\n                    />\n                  </TooltipWrapper>\n\n                  <TooltipWrapper tooltip={\"Change Password\"}>\n                    <Button\n                      id={\"change-user-password\"}\n                      onClick={changeUserPassword}\n                      icon={<PasswordKeyIcon />}\n                      variant={\"regular\"}\n                      disabled={userLoggedIn === userName}\n                    />\n                  </TooltipWrapper>\n                </Fragment>\n              }\n              sx={{ marginBottom: 15 }}\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <Tabs\n              currentTabOrPath={selectedTab}\n              onTabClick={setSelectedTab}\n              options={[\n                {\n                  tabConfig: {\n                    id: \"groups\",\n                    label: \"Groups\",\n                    disabled: !canAssignGroup,\n                  },\n                  content: (\n                    <Fragment>\n                      <Box\n                        onMouseMove={() =>\n                          dispatch(setHelpName(\"user_details_groups\"))\n                        }\n                      >\n                        <SectionTitle\n                          separator\n                          sx={{ marginBottom: 15 }}\n                          actions={\n                            <TooltipWrapper\n                              tooltip={\n                                canAssignGroup\n                                  ? \"Assign groups\"\n                                  : permissionTooltipHelper(\n                                      assignGroupPermissions,\n                                      \"add users to groups\",\n                                    )\n                              }\n                            >\n                              <Button\n                                id={\"add-groups\"}\n                                label={\"Add to Groups\"}\n                                onClick={() => {\n                                  setAddGroupOpen(true);\n                                }}\n                                icon={<AddIcon />}\n                                variant={\"callAction\"}\n                                disabled={!canAssignGroup}\n                              />\n                            </TooltipWrapper>\n                          }\n                        >\n                          Groups\n                        </SectionTitle>\n                      </Box>\n                      <Grid\n                        item\n                        xs={12}\n                        onMouseMove={() =>\n                          dispatch(setHelpName(\"user_details_groups\"))\n                        }\n                      >\n                        <DataTable\n                          itemActions={groupTableActions}\n                          columns={[{ label: \"Name\", elementKey: \"group\" }]}\n                          isLoading={loading}\n                          records={currentGroups}\n                          entityName=\"Groups\"\n                          idField=\"group\"\n                        />\n                      </Grid>\n                    </Fragment>\n                  ),\n                },\n                {\n                  tabConfig: {\n                    id: \"service_accounts\",\n                    label: \"Service Accounts\",\n                    disabled: !hasPermission(\n                      CONSOLE_UI_RESOURCE,\n                      editServiceAccountPermissions,\n                    ),\n                  },\n                  content: (\n                    <UserServiceAccountsPanel\n                      user={userName}\n                      hasPolicy={hasPolicy}\n                    />\n                  ),\n                },\n                {\n                  tabConfig: {\n                    id: \"policies\",\n                    label: \"Policies\",\n                    disabled: !canAssignPolicy,\n                  },\n                  content: (\n                    <Fragment>\n                      <Box\n                        onMouseMove={() =>\n                          dispatch(setHelpName(\"user_details_policies\"))\n                        }\n                      >\n                        <SectionTitle\n                          separator\n                          sx={{ marginBottom: 15 }}\n                          actions={\n                            <TooltipWrapper\n                              tooltip={\n                                canAssignPolicy\n                                  ? \"Assign Policies\"\n                                  : permissionTooltipHelper(\n                                      assignIAMPolicyPermissions,\n                                      \"assign policies\",\n                                    )\n                              }\n                            >\n                              <Button\n                                id={\"assign-policies\"}\n                                label={\"Assign Policies\"}\n                                onClick={() => {\n                                  setPolicyOpen(true);\n                                }}\n                                icon={<IAMPoliciesIcon />}\n                                variant={\"callAction\"}\n                                disabled={!canAssignPolicy}\n                              />\n                            </TooltipWrapper>\n                          }\n                        >\n                          Policies\n                        </SectionTitle>\n                      </Box>\n                      <Box>\n                        <DataTable\n                          itemActions={[\n                            {\n                              type: \"view\",\n                              onClick: (policy: IPolicyItem) => {\n                                navigate(\n                                  `${IAM_PAGES.POLICIES}/${encodeURIComponent(\n                                    policy.policy,\n                                  )}`,\n                                );\n                              },\n                            },\n                          ]}\n                          columns={[{ label: \"Name\", elementKey: \"policy\" }]}\n                          isLoading={loading}\n                          records={currentPolicies}\n                          entityName=\"Policies\"\n                          idField=\"policy\"\n                        />\n                      </Box>\n                    </Fragment>\n                  ),\n                },\n              ]}\n            />\n          </Grid>\n        </Grid>\n      </PageLayout>\n    </Fragment>\n  );\n};\n\nexport default UserDetails;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React from \"react\";\n\nimport {\n  Box,\n  ChangeAccessPolicyIcon,\n  GroupsIcon,\n  HelpIconFilled,\n  UsersIcon,\n} from \"mds\";\n\nconst FeatureItem = ({\n  icon,\n  description,\n}: {\n  icon: any;\n  description: string;\n}) => {\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        \"& .min-icon\": {\n          marginRight: \"10px\",\n          height: \"23px\",\n          width: \"23px\",\n          marginBottom: \"10px\",\n        },\n      }}\n    >\n      {icon}{\" \"}\n      <div style={{ fontSize: \"14px\", fontStyle: \"italic\", color: \"#5E5E5E\" }}>\n        {description}\n      </div>\n    </Box>\n  );\n};\nconst AddUserHelpBox = () => {\n  return (\n    <Box\n      sx={{\n        flex: 1,\n        border: \"1px solid #eaeaea\",\n        borderRadius: \"2px\",\n        display: \"flex\",\n        flexFlow: \"column\",\n        padding: \"20px\",\n        marginTop: 0,\n      }}\n    >\n      <Box\n        sx={{\n          fontSize: \"16px\",\n          fontWeight: 600,\n          display: \"flex\",\n          alignItems: \"center\",\n          marginBottom: \"16px\",\n\n          \"& .min-icon\": {\n            height: \"21px\",\n            width: \"21px\",\n            marginRight: \"15px\",\n          },\n        }}\n      >\n        <HelpIconFilled />\n        <div>Learn more about the Users feature</div>\n      </Box>\n      <Box sx={{ fontSize: \"14px\", marginBottom: \"15px\" }}>\n        A MinIO user consists of a unique access key (username) and\n        corresponding secret key (password). Clients must authenticate their\n        identity by specifying both a valid access key (username) and the\n        corresponding secret key (password) of an existing MinIO user.\n        <br />\n        <br />\n        Each user can have one or more assigned policies that explicitly list\n        the actions and resources to which that user has access. Users can also\n        inherit policies from the groups in which they have membership.\n        <br />\n      </Box>\n\n      <Box\n        sx={{\n          display: \"flex\",\n          flexFlow: \"column\",\n        }}\n      >\n        <FeatureItem icon={<UsersIcon />} description={`Create Users`} />\n        <FeatureItem icon={<GroupsIcon />} description={`Manage Groups`} />\n        <FeatureItem\n          icon={<ChangeAccessPolicyIcon />}\n          description={`Assign Policies`}\n        />\n      </Box>\n    </Box>\n  );\n};\n\nexport default AddUserHelpBox;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { setUserName } from \"./AddUsersSlice\";\nimport { useSelector } from \"react-redux\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport { InputBox } from \"mds\";\n\nconst UserSelector = () => {\n  const dispatch = useAppDispatch();\n  const userName = useSelector((state: AppState) => state.createUser.userName);\n  return (\n    <InputBox\n      id=\"accesskey-input\"\n      name=\"accesskey-input\"\n      label=\"User Name\"\n      value={userName}\n      autoFocus={true}\n      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n        dispatch(setUserName(e.target.value));\n      }}\n    />\n  );\n};\nexport default UserSelector;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { InputBox } from \"mds\";\nimport { setSecretKey } from \"./AddUsersSlice\";\nimport { useSelector } from \"react-redux\";\nimport { AppState, useAppDispatch } from \"../../../store\";\n\nconst PasswordSelector = () => {\n  const dispatch = useAppDispatch();\n  const secretKey = useSelector(\n    (state: AppState) => state.createUser.secretKey,\n  );\n\n  return (\n    <InputBox\n      id=\"standard-multiline-static\"\n      name=\"standard-multiline-static\"\n      type=\"password\"\n      label=\"Password\"\n      value={secretKey}\n      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n        dispatch(setSecretKey(e.target.value));\n      }}\n      autoComplete=\"current-password\"\n    />\n  );\n};\nexport default PasswordSelector;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect } from \"react\";\nimport {\n  BackLink,\n  Button,\n  CreateUserIcon,\n  FormLayout,\n  Grid,\n  PageLayout,\n  ProgressBar,\n} from \"mds\";\nimport { createUserAsync, resetFormAsync } from \"./thunk/AddUsersThunk\";\nimport { modalStyleUtils } from \"../Common/FormComponents/common/styleLibrary\";\n\nimport { IAM_PAGES } from \"../../../common/SecureComponent/permissions\";\nimport { useNavigate } from \"react-router-dom\";\nimport { setErrorSnackMessage, setHelpName } from \"../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport { useSelector } from \"react-redux\";\nimport {\n  setAddLoading,\n  setSelectedGroups,\n  setSendEnabled,\n} from \"./AddUsersSlice\";\nimport AddUserHelpBox from \"./AddUserHelpBox\";\nimport PageHeaderWrapper from \"../Common/PageHeaderWrapper/PageHeaderWrapper\";\nimport HelpMenu from \"../HelpMenu\";\nimport PolicySelectors from \"../Policies/PolicySelectors\";\nimport UserSelector from \"./UserSelector\";\nimport PasswordSelector from \"./PasswordSelector\";\nimport GroupsSelectors from \"./GroupsSelectors\";\n\nconst AddUser = () => {\n  const dispatch = useAppDispatch();\n  const selectedPolicies = useSelector(\n    (state: AppState) => state.createUser.selectedPolicies,\n  );\n  const selectedGroups = useSelector(\n    (state: AppState) => state.createUser.selectedGroups,\n  );\n  const addLoading = useSelector(\n    (state: AppState) => state.createUser.addLoading,\n  );\n  const sendEnabled = useSelector(\n    (state: AppState) => state.createUser.sendEnabled,\n  );\n  const secretKeylength = useSelector(\n    (state: AppState) => state.createUser.secretKeylength,\n  );\n  const navigate = useNavigate();\n  dispatch(setSendEnabled());\n\n  const saveRecord = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (secretKeylength < 8) {\n      dispatch(\n        setErrorSnackMessage({\n          errorMessage: \"Passwords must be at least 8 characters long\",\n          detailedError: \"\",\n        }),\n      );\n      dispatch(setAddLoading(false));\n      return;\n    }\n    if (addLoading) {\n      return;\n    }\n    dispatch(setAddLoading(true));\n    dispatch(createUserAsync())\n      .unwrap() // <-- async Thunk returns a promise, that can be 'unwrapped')\n      .then(() => navigate(`${IAM_PAGES.USERS}`));\n  };\n\n  useEffect(() => {\n    dispatch(setHelpName(\"add_user\"));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Fragment>\n      <Grid item xs={12}>\n        <PageHeaderWrapper\n          label={\n            <BackLink\n              label={\"Users\"}\n              onClick={() => navigate(IAM_PAGES.USERS)}\n            />\n          }\n          actions={<HelpMenu />}\n        />\n        <PageLayout>\n          <FormLayout\n            title={\"Create User\"}\n            icon={<CreateUserIcon />}\n            helpBox={<AddUserHelpBox />}\n          >\n            <form\n              noValidate\n              autoComplete=\"off\"\n              onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n                saveRecord(e);\n              }}\n            >\n              <UserSelector />\n              <PasswordSelector />\n              <PolicySelectors selectedPolicy={selectedPolicies} />\n              <GroupsSelectors\n                selectedGroups={selectedGroups}\n                setSelectedGroups={(elements: string[]) => {\n                  dispatch(setSelectedGroups(elements));\n                }}\n              />\n              {addLoading && (\n                <Grid item xs={12}>\n                  <ProgressBar />\n                </Grid>\n              )}\n\n              <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n                <Button\n                  id={\"clear-add-user\"}\n                  type=\"button\"\n                  variant=\"regular\"\n                  onClick={(e) => {\n                    dispatch(resetFormAsync());\n                  }}\n                  label={\"Clear\"}\n                />\n\n                <Button\n                  id={\"save-user\"}\n                  type=\"submit\"\n                  variant=\"callAction\"\n                  color=\"primary\"\n                  disabled={addLoading || !sendEnabled}\n                  label={\"Save\"}\n                />\n              </Grid>\n            </form>\n          </FormLayout>\n        </PageLayout>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default AddUser;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React from \"react\";\nimport {\n  Box,\n  HelpIconFilled,\n  IAMPoliciesIcon,\n  PasswordKeyIcon,\n  ServiceAccountIcon,\n} from \"mds\";\n\nconst FeatureItem = ({\n  icon,\n  description,\n}: {\n  icon: any;\n  description: string;\n}) => {\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        \"& .min-icon\": {\n          marginRight: \"10px\",\n          height: \"23px\",\n          width: \"23px\",\n          marginBottom: \"10px\",\n        },\n      }}\n    >\n      {icon}{\" \"}\n      <div style={{ fontSize: \"14px\", fontStyle: \"italic\", color: \"#5E5E5E\" }}>\n        {description}\n      </div>\n    </Box>\n  );\n};\nconst AddUserServiceAccountHelpBox = () => {\n  return (\n    <Box\n      sx={{\n        flex: 1,\n        border: \"1px solid #eaeaea\",\n        borderRadius: \"2px\",\n        display: \"flex\",\n        flexFlow: \"column\",\n        padding: \"20px\",\n        marginTop: 0,\n      }}\n    >\n      <Box\n        sx={{\n          fontSize: \"16px\",\n          fontWeight: 600,\n          display: \"flex\",\n          alignItems: \"center\",\n          marginBottom: \"16px\",\n          paddingBottom: \"20px\",\n\n          \"& .min-icon\": {\n            height: \"21px\",\n            width: \"21px\",\n            marginRight: \"15px\",\n          },\n        }}\n      >\n        <HelpIconFilled />\n        <div>Learn more about Access Keys</div>\n      </Box>\n      <Box sx={{ fontSize: \"14px\", marginBottom: \"15px\" }}>\n        <Box sx={{ paddingBottom: \"20px\" }}>\n          <FeatureItem\n            icon={<ServiceAccountIcon />}\n            description={`Create Access Keys`}\n          />\n          <Box sx={{ paddingTop: \"20px\" }}>\n            Access Keys inherit the policies explicitly attached to the parent\n            user, and the policies attached to each group in which the parent\n            user has membership.\n          </Box>\n        </Box>\n        <Box sx={{ paddingBottom: \"20px\" }}>\n          <FeatureItem\n            icon={<PasswordKeyIcon />}\n            description={`Assign Custom Credentials`}\n          />\n          <Box sx={{ paddingTop: \"10px\" }}>\n            Randomized access credentials are recommended, and provided by\n            default. You may use your own custom Access Key and Secret Key by\n            replacing the default values. After creation of any Access Key, you\n            will be given the opportunity to view and download the account\n            credentials.\n          </Box>\n          <Box sx={{ paddingTop: \"10px\" }}>\n            Access Keys support programmatic access by applications. You cannot\n            use a Access Key to log into the MinIO Console.\n          </Box>\n        </Box>\n        <Box sx={{ paddingBottom: \"20px\" }}>\n          <FeatureItem\n            icon={<IAMPoliciesIcon />}\n            description={`Assign Access Policies`}\n          />\n          <Box sx={{ paddingTop: \"10px\" }}>\n            You can specify an optional JSON-formatted IAM policy to further\n            restrict Access Key access to a subset of the actions and resources\n            explicitly allowed for the parent user. Additional access beyond\n            that of the parent user cannot be implemented through these\n            policies.\n          </Box>\n          <Box sx={{ paddingTop: \"10px\" }}>\n            You cannot modify the optional Access Key IAM policy after saving.\n          </Box>\n        </Box>\n      </Box>\n      <Box\n        sx={{\n          display: \"flex\",\n          flexFlow: \"column\",\n        }}\n      ></Box>\n    </Box>\n  );\n};\n\nexport default AddUserServiceAccountHelpBox;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport {\n  BackLink,\n  Box,\n  Button,\n  FormLayout,\n  Grid,\n  InputBox,\n  PageLayout,\n  PasswordKeyIcon,\n  ServiceAccountCredentialsIcon,\n  ServiceAccountIcon,\n  Switch,\n  HelpTip,\n  DateTimeInput,\n} from \"mds\";\nimport { modalStyleUtils } from \"../Common/FormComponents/common/styleLibrary\";\nimport { NewServiceAccount } from \"../Common/CredentialsPrompt/types\";\nimport { IAM_PAGES } from \"../../../common/SecureComponent/permissions\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport { getRandomString } from \"../../../common/utils\";\nimport { setErrorSnackMessage, setHelpName } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport CodeMirrorWrapper from \"../Common/FormComponents/CodeMirrorWrapper/CodeMirrorWrapper\";\nimport api from \"../../../../src/common/api\";\nimport CredentialsPrompt from \"../Common/CredentialsPrompt/CredentialsPrompt\";\nimport AddUserServiceAccountHelpBox from \"./AddUserServiceAccountHelpBox\";\nimport PageHeaderWrapper from \"../Common/PageHeaderWrapper/PageHeaderWrapper\";\nimport HelpMenu from \"../HelpMenu\";\nimport PanelTitle from \"../Common/PanelTitle/PanelTitle\";\n\nconst AddServiceAccount = () => {\n  const dispatch = useAppDispatch();\n  const params = useParams();\n  const navigate = useNavigate();\n\n  const [addSending, setAddSending] = useState<boolean>(false);\n  const [accessKey, setAccessKey] = useState<string>(getRandomString(20));\n  const [secretKey, setSecretKey] = useState<string>(getRandomString(40));\n  const [isRestrictedByPolicy, setIsRestrictedByPolicy] =\n    useState<boolean>(false);\n  const [newServiceAccount, setNewServiceAccount] =\n    useState<NewServiceAccount | null>(null);\n  const [policyJSON, setPolicyJSON] = useState<string>(\"\");\n\n  const userName = params.userName || \"\";\n\n  const [name, setName] = useState<string>(\"\");\n  const [description, setDescription] = useState<string>(\"\");\n  const [comments, setComments] = useState<string>(\"\");\n  const [expiry, setExpiry] = useState<any>();\n\n  useEffect(() => {\n    if (addSending) {\n      const expiryDt = expiry ? expiry.toJSDate().toISOString() : null;\n      api\n        .invoke(\n          \"POST\",\n          `/api/v1/user/${encodeURIComponent(\n            userName,\n          )}/service-account-credentials`,\n          {\n            policy: policyJSON,\n            accessKey: accessKey,\n            secretKey: secretKey,\n            description: description,\n            comment: comments,\n            name: name,\n            expiry: expiryDt,\n          },\n        )\n        .then((res) => {\n          setAddSending(false);\n          setNewServiceAccount({\n            accessKey: res.accessKey || \"\",\n            secretKey: res.secretKey || \"\",\n            url: res.url || \"\",\n          });\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setAddSending(false);\n          dispatch(setErrorSnackMessage(err));\n        });\n    }\n  }, [\n    addSending,\n    setAddSending,\n    dispatch,\n    policyJSON,\n    userName,\n    accessKey,\n    secretKey,\n    name,\n    description,\n    expiry,\n    comments,\n  ]);\n\n  useEffect(() => {\n    if (isRestrictedByPolicy) {\n      api\n        .invoke(\"GET\", `/api/v1/user/${encodeURIComponent(userName)}/policies`)\n\n        .then((res) => {\n          setPolicyJSON(JSON.stringify(JSON.parse(res.policy), null, 4));\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setErrorSnackMessage(err);\n        });\n    }\n  }, [isRestrictedByPolicy, userName]);\n\n  const addUserServiceAccount = (e: React.FormEvent) => {\n    e.preventDefault();\n    setAddSending(true);\n  };\n\n  const resetForm = () => {\n    setNewServiceAccount(null);\n    setAccessKey(\"\");\n    setSecretKey(\"\");\n  };\n\n  const closeCredentialsModal = () => {\n    setNewServiceAccount(null);\n    navigate(`${IAM_PAGES.USERS}/${encodeURIComponent(userName)}`);\n  };\n\n  useEffect(() => {\n    dispatch(setHelpName(\"add_user_SA\"));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Fragment>\n      {newServiceAccount && (\n        <CredentialsPrompt\n          newServiceAccount={newServiceAccount}\n          open\n          closeModal={() => {\n            closeCredentialsModal();\n          }}\n          entity=\"Access Key\"\n        />\n      )}\n      <Grid item xs={12}>\n        <PageHeaderWrapper\n          label={\n            <BackLink\n              onClick={() =>\n                navigate(`${IAM_PAGES.USERS}/${encodeURIComponent(userName)}`)\n              }\n              label={\"User Details - \" + userName}\n            />\n          }\n          actions={<HelpMenu />}\n        />\n        <PageLayout>\n          <FormLayout\n            helpBox={<AddUserServiceAccountHelpBox />}\n            icon={<ServiceAccountCredentialsIcon />}\n            title={`Create Access Key for ${userName}`}\n          >\n            <form\n              noValidate\n              autoComplete=\"off\"\n              onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n                e.preventDefault();\n                addUserServiceAccount(e);\n              }}\n            >\n              <InputBox\n                value={accessKey}\n                label={\"Access Key\"}\n                id={\"accessKey\"}\n                name={\"accessKey\"}\n                placeholder={\"Enter Access Key\"}\n                onChange={(e) => {\n                  setAccessKey(e.target.value);\n                }}\n                startIcon={<ServiceAccountIcon />}\n              />\n              <InputBox\n                value={secretKey}\n                label={\"Secret Key\"}\n                id={\"secretKey\"}\n                name={\"secretKey\"}\n                type={\"password\"}\n                placeholder={\"Enter Secret Key\"}\n                onChange={(e) => {\n                  setSecretKey(e.target.value);\n                }}\n                startIcon={<PasswordKeyIcon />}\n              />\n\n              <Switch\n                value=\"serviceAccountPolicy\"\n                id=\"serviceAccountPolicy\"\n                name=\"serviceAccountPolicy\"\n                checked={isRestrictedByPolicy}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setIsRestrictedByPolicy(event.target.checked);\n                }}\n                label={\"Restrict beyond user policy\"}\n                description={\n                  \"You can specify an optional JSON-formatted IAM policy to further restrict Access Key access to a subset of the actions and resources explicitly allowed for the parent user. Additional access beyond that of the parent user cannot be implemented through these policies.\"\n                }\n              />\n              {isRestrictedByPolicy && (\n                <Grid item xs={12}>\n                  <Box>\n                    <HelpTip\n                      content={\n                        <Fragment>\n                          <a\n                            target=\"blank\"\n                            href=\"https://min.io/docs/minio/kubernetes/upstream/administration/identity-access-management/policy-based-access-control.html#policy-document-structure\"\n                          >\n                            Guide to access policy structure\n                          </a>\n                        </Fragment>\n                      }\n                      placement=\"right\"\n                    >\n                      <PanelTitle>\n                        Current User Policy - edit the JSON to remove\n                        permissions for this Access Key\n                      </PanelTitle>\n                    </HelpTip>\n                  </Box>\n                  <Grid item xs={12} sx={{ ...modalStyleUtils.formScrollable }}>\n                    <CodeMirrorWrapper\n                      value={policyJSON}\n                      onChange={(value) => {\n                        setPolicyJSON(value);\n                      }}\n                      editorHeight={\"350px\"}\n                      helptip={\n                        <Fragment>\n                          <a\n                            target=\"blank\"\n                            href=\"https://min.io/docs/minio/kubernetes/upstream/administration/identity-access-management/policy-based-access-control.html#policy-document-structure\"\n                          >\n                            Guide to access policy structure\n                          </a>\n                        </Fragment>\n                      }\n                    />\n                  </Grid>\n                </Grid>\n              )}\n\n              <Box\n                sx={{\n                  marginBottom: \"15px\",\n                  marginTop: \"15px\",\n                  width: \"100%\",\n                  \"& label\": { width: \"180px\" },\n                }}\n              >\n                <DateTimeInput\n                  noLabelMinWidth\n                  value={expiry}\n                  onChange={(e) => {\n                    setExpiry(e);\n                  }}\n                  id=\"expiryTime\"\n                  label={\"Expiry\"}\n                  timeFormat={\"24h\"}\n                  secondsSelector={false}\n                />\n              </Box>\n\n              <InputBox\n                value={name}\n                label={\"Name\"}\n                id={\"name\"}\n                name={\"name\"}\n                type={\"text\"}\n                placeholder={\"Enter a name\"}\n                onChange={(e) => {\n                  setName(e.target.value);\n                }}\n              />\n              <InputBox\n                value={description}\n                label={\"Description\"}\n                id={\"description\"}\n                name={\"description\"}\n                type={\"text\"}\n                placeholder={\"Enter a description\"}\n                onChange={(e) => {\n                  setDescription(e.target.value);\n                }}\n              />\n              <InputBox\n                value={comments}\n                label={\"Comments\"}\n                id={\"comment\"}\n                name={\"comment\"}\n                type={\"text\"}\n                placeholder={\"Enter a comment\"}\n                onChange={(e) => {\n                  setComments(e.target.value);\n                }}\n              />\n              <Grid item xs={12} sx={{ ...modalStyleUtils.modalButtonBar }}>\n                <Button\n                  id={\"clear\"}\n                  type=\"button\"\n                  variant=\"regular\"\n                  onClick={resetForm}\n                  label={\"Clear\"}\n                />\n\n                <Button\n                  id={\"create-sa\"}\n                  type=\"submit\"\n                  variant=\"callAction\"\n                  color=\"primary\"\n                  label={\"Create\"}\n                />\n              </Grid>\n            </form>\n          </FormLayout>\n        </PageLayout>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default AddServiceAccount;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\nimport NotFoundPage from \"../../NotFoundPage\";\nimport ListUsers from \"./ListUsers\";\nimport UserDetails from \"./UserDetails\";\nimport AddUserScreen from \"./AddUserScreen\";\nimport AddUserServiceAccountScreen from \"./AddUserServiceAccountScreen\";\n\nconst Users = () => {\n  return (\n    <Routes>\n      <Route path={\"add-user\"} element={<AddUserScreen />} />\n      <Route path={\":userName\"} element={<UserDetails />} />\n      <Route\n        path={\"new-user-sa/:userName\"}\n        element={<AddUserServiceAccountScreen />}\n      />\n      <Route path={\"/\"} element={<ListUsers />} />\n      <Route element={<NotFoundPage />} />\n    </Routes>\n  );\n};\n\nexport default Users;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { setErrorSnackMessage } from \"../../../systemSlice\";\nimport { ConfirmDeleteIcon, DataTable, InformativeMessage, Loader } from \"mds\";\nimport { IAM_PAGES } from \"../../../common/SecureComponent/permissions\";\nimport ConfirmDialog from \"../Common/ModalWrapper/ConfirmDialog\";\nimport { useAppDispatch } from \"../../../store\";\nimport { api } from \"api\";\nimport { UserServiceAccountItem } from \"../../../api/consoleApi\";\nimport { errorToHandler } from \"../../../api/errors\";\n\ninterface IDeleteUserProps {\n  closeDeleteModalAndRefresh: (refresh: boolean) => void;\n  deleteOpen: boolean;\n  selectedUsers: string[] | null;\n}\n\nconst DeleteUser = ({\n  closeDeleteModalAndRefresh,\n  deleteOpen,\n  selectedUsers,\n}: IDeleteUserProps) => {\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n\n  const onClose = () => closeDeleteModalAndRefresh(false);\n\n  const [loadingSA, setLoadingSA] = useState<boolean>(true);\n  const [hasSA, setHasSA] = useState<boolean>(false);\n  const [userSAList, setUserSAList] = useState<UserServiceAccountItem[]>([]);\n  const [deleteLoading, setDeleteLoading] = useState<boolean>(false);\n\n  const userLoggedIn = localStorage.getItem(\"userLoggedIn\") || \"\";\n\n  useEffect(() => {\n    if (selectedUsers) {\n      api.users\n        .checkUserServiceAccounts(selectedUsers)\n        .then((res) => {\n          if (res.data) {\n            setUserSAList(res.data.userServiceAccountList ?? []);\n            if (res.data.hasSA) {\n              setHasSA(true);\n            }\n          }\n        })\n        .catch((err) =>\n          dispatch(setErrorSnackMessage(errorToHandler(err.error))),\n        )\n        .finally(() => setLoadingSA(false));\n    }\n  }, [selectedUsers, dispatch]);\n\n  if (!selectedUsers) {\n    return null;\n  }\n  const renderUsers = selectedUsers.map((user) => (\n    <div key={user}>\n      <b>{user}</b>\n    </div>\n  ));\n  const viewAction = (selectionElement: any): void => {\n    navigate(\n      `${IAM_PAGES.USERS}/${encodeURIComponent(selectionElement.userName)}`,\n    );\n    onClose();\n  };\n  const tableActions = [\n    {\n      type: \"view\",\n      onClick: viewAction,\n    },\n  ];\n\n  const onConfirmDelete = () => {\n    for (let user of selectedUsers) {\n      if (user === userLoggedIn) {\n        dispatch(\n          setErrorSnackMessage({\n            errorMessage: \"Cannot delete currently logged in user\",\n            detailedError: `Cannot delete currently logged in user ${userLoggedIn}`,\n          }),\n        );\n        closeDeleteModalAndRefresh(true);\n      } else {\n        api.user\n          .removeUser(user)\n          .then((res) => {\n            closeDeleteModalAndRefresh(true);\n            navigate(`${IAM_PAGES.USERS}`);\n          })\n          .finally(() => setDeleteLoading(false));\n      }\n    }\n  };\n\n  const noSAtext =\n    \"Are you sure you want to delete the following \" +\n    selectedUsers.length +\n    \" \" +\n    \"user\" +\n    (selectedUsers.length > 1 ? \"s?\" : \"?\");\n\n  return (\n    <ConfirmDialog\n      title={`Delete User${selectedUsers.length > 1 ? \"s\" : \"\"}`}\n      confirmText={\"Delete\"}\n      isOpen={deleteOpen}\n      titleIcon={<ConfirmDeleteIcon />}\n      isLoading={deleteLoading}\n      onConfirm={onConfirmDelete}\n      onClose={onClose}\n      confirmationContent={\n        loadingSA ? (\n          <Loader />\n        ) : (\n          <Fragment>\n            {hasSA ? (\n              <Fragment>\n                <InformativeMessage\n                  variant={\"warning\"}\n                  message={\n                    <Fragment>\n                      Click on a user to view the full listing of associated\n                      Access Keys. All Access Keys associated with a user will\n                      be deleted along with the user.\n                      <br />\n                      <br />\n                      <strong>Are you sure you want to continue?</strong>\n                    </Fragment>\n                  }\n                  title=\"Warning: One or more users selected has associated Access Keys.\"\n                  sx={{ margin: \"15px 0\" }}\n                />\n                <DataTable\n                  itemActions={tableActions}\n                  columns={[\n                    { label: \"Username\", elementKey: \"userName\" },\n                    {\n                      label: \"# Associated Access Keys\",\n                      elementKey: \"numSAs\",\n                    },\n                  ]}\n                  isLoading={loadingSA}\n                  records={userSAList}\n                  entityName=\"User Access Keys\"\n                  idField=\"userName\"\n                  customPaperHeight=\"250\"\n                />\n              </Fragment>\n            ) : (\n              <Fragment>\n                {noSAtext}\n                {renderUsers}\n              </Fragment>\n            )}\n          </Fragment>\n        )\n      }\n    />\n  );\n};\n\nexport default DeleteUser;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Button, CopyIcon, InputLabel, ReadBox, Box } from \"mds\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport { setModalSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\n\ninterface ICredentialsItem {\n  label?: string;\n  value?: string;\n}\n\nconst CredentialItem = ({ label = \"\", value = \"\" }: ICredentialsItem) => {\n  const dispatch = useAppDispatch();\n\n  return (\n    <Box sx={{ marginTop: 12 }}>\n      <InputLabel>{label}</InputLabel>\n      <ReadBox\n        actionButton={\n          <CopyToClipboard text={value}>\n            <Button\n              id={\"copy-path\"}\n              variant=\"regular\"\n              onClick={() => {\n                dispatch(setModalSnackMessage(`${label} copied to clipboard`));\n              }}\n              style={{\n                marginRight: \"5px\",\n                width: \"28px\",\n                height: \"28px\",\n                padding: \"0px\",\n              }}\n              icon={<CopyIcon />}\n            />\n          </CopyToClipboard>\n        }\n      >\n        {value}\n      </ReadBox>\n    </Box>\n  );\n};\n\nexport default CredentialItem;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport get from \"lodash/get\";\nimport styled from \"styled-components\";\nimport {\n  Box,\n  Button,\n  DownloadIcon,\n  ServiceAccountCredentialsIcon,\n  WarnIcon,\n  Grid,\n} from \"mds\";\nimport { NewServiceAccount } from \"./types\";\nimport ModalWrapper from \"../ModalWrapper/ModalWrapper\";\nimport CredentialItem from \"./CredentialItem\";\nimport TooltipWrapper from \"../TooltipWrapper/TooltipWrapper\";\nimport { modalStyleUtils } from \"../FormComponents/common/styleLibrary\";\n\nconst WarningBlock = styled.div(({ theme }) => ({\n  color: get(theme, \"signalColors.danger\", \"#C51B3F\"),\n  fontSize: \".85rem\",\n  margin: \".5rem 0 .5rem 0\",\n  display: \"flex\",\n  alignItems: \"center\",\n  \"& svg \": {\n    marginRight: \".3rem\",\n    height: 16,\n    width: 16,\n  },\n}));\n\ninterface ICredentialsPromptProps {\n  newServiceAccount: NewServiceAccount | null;\n  open: boolean;\n  entity: string;\n  closeModal: () => void;\n}\n\nconst download = (filename: string, text: string) => {\n  let element = document.createElement(\"a\");\n  element.setAttribute(\"href\", \"data:text/plain;charset=utf-8,\" + text);\n  element.setAttribute(\"download\", filename);\n\n  element.style.display = \"none\";\n  document.body.appendChild(element);\n\n  element.click();\n  document.body.removeChild(element);\n};\n\nconst CredentialsPrompt = ({\n  newServiceAccount,\n  open,\n  closeModal,\n  entity,\n}: ICredentialsPromptProps) => {\n  if (!newServiceAccount) {\n    return null;\n  }\n  const consoleCreds = get(newServiceAccount, \"console\", null);\n  const idp = get(newServiceAccount, \"idp\", false);\n\n  const downloadImport = () => {\n    let consoleExtras = {};\n\n    if (consoleCreds) {\n      if (!Array.isArray(consoleCreds)) {\n        consoleExtras = {\n          url: consoleCreds.url,\n          accessKey: consoleCreds.accessKey,\n          secretKey: consoleCreds.secretKey,\n          api: \"s3v4\",\n          path: \"auto\",\n        };\n      } else {\n        const cCreds = consoleCreds.map((itemMap) => {\n          return {\n            url: itemMap.url,\n            accessKey: itemMap.accessKey,\n            secretKey: itemMap.secretKey,\n            api: \"s3v4\",\n            path: \"auto\",\n          };\n        });\n        consoleExtras = cCreds[0];\n      }\n    } else {\n      consoleExtras = {\n        url: newServiceAccount.url,\n        accessKey: newServiceAccount.accessKey,\n        secretKey: newServiceAccount.secretKey,\n        api: \"s3v4\",\n        path: \"auto\",\n      };\n    }\n\n    download(\n      \"credentials.json\",\n      JSON.stringify({\n        ...consoleExtras,\n      }),\n    );\n  };\n\n  const downloaddAllCredentials = () => {\n    let allCredentials = {};\n    if (\n      consoleCreds &&\n      Array.isArray(consoleCreds) &&\n      consoleCreds.length > 1\n    ) {\n      const cCreds = consoleCreds.map((itemMap) => {\n        return {\n          accessKey: itemMap.accessKey,\n          secretKey: itemMap.secretKey,\n        };\n      });\n      allCredentials = cCreds;\n    }\n    download(\n      \"all_credentials.json\",\n      JSON.stringify({\n        ...allCredentials,\n      }),\n    );\n  };\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      onClose={() => {\n        closeModal();\n      }}\n      title={`New ${entity} Created`}\n      titleIcon={<ServiceAccountCredentialsIcon />}\n    >\n      <Grid container>\n        <Grid item xs={12}>\n          A new {entity} has been created with the following details:\n          {!idp && consoleCreds && (\n            <Fragment>\n              <Grid\n                item\n                xs={12}\n                sx={{\n                  overflowY: \"auto\",\n                  maxHeight: 350,\n                }}\n              >\n                <Box\n                  sx={{\n                    padding: \".8rem 0 0 0\",\n                    fontWeight: 600,\n                    fontSize: \".9rem\",\n                  }}\n                >\n                  Console Credentials\n                </Box>\n                {Array.isArray(consoleCreds) &&\n                  consoleCreds.map((credentialsPair, index) => {\n                    return (\n                      <Fragment>\n                        <CredentialItem\n                          label=\"Access Key\"\n                          value={credentialsPair.accessKey}\n                        />\n                        <CredentialItem\n                          label=\"Secret Key\"\n                          value={credentialsPair.secretKey}\n                        />\n                      </Fragment>\n                    );\n                  })}\n                {!Array.isArray(consoleCreds) && (\n                  <Fragment>\n                    <CredentialItem\n                      label=\"Access Key\"\n                      value={consoleCreds.accessKey}\n                    />\n                    <CredentialItem\n                      label=\"Secret Key\"\n                      value={consoleCreds.secretKey}\n                    />\n                  </Fragment>\n                )}\n              </Grid>\n            </Fragment>\n          )}\n          {(consoleCreds === null || consoleCreds === undefined) && (\n            <>\n              <CredentialItem\n                label=\"Access Key\"\n                value={newServiceAccount.accessKey || \"\"}\n              />\n              <CredentialItem\n                label=\"Secret Key\"\n                value={newServiceAccount.secretKey || \"\"}\n              />\n            </>\n          )}\n          {idp ? (\n            <WarningBlock>\n              Please Login via the configured external identity provider.\n            </WarningBlock>\n          ) : (\n            <WarningBlock>\n              <WarnIcon />\n              <span>\n                Write these down, as this is the only time the secret will be\n                displayed.\n              </span>\n            </WarningBlock>\n          )}\n        </Grid>\n        <Grid item xs={12} sx={{ ...modalStyleUtils.modalButtonBar }}>\n          {!idp && (\n            <Fragment>\n              <TooltipWrapper\n                tooltip={\n                  \"Download credentials in a JSON file formatted for import using mc alias import. This will only include the default login credentials.\"\n                }\n              >\n                <Button\n                  id={\"download-button\"}\n                  label={\"Download for import\"}\n                  onClick={downloadImport}\n                  icon={<DownloadIcon />}\n                  variant=\"callAction\"\n                />\n              </TooltipWrapper>\n\n              {Array.isArray(consoleCreds) && consoleCreds.length > 1 && (\n                <TooltipWrapper\n                  tooltip={\n                    \"Download all access credentials to a JSON file. NOTE: This file is not formatted for import using mc alias import. If you plan to import this alias from the file, please use the Download for Import button. \"\n                  }\n                >\n                  <Button\n                    id={\"download-all-button\"}\n                    label={\"Download all access credentials\"}\n                    onClick={downloaddAllCredentials}\n                    icon={<DownloadIcon />}\n                    variant=\"callAction\"\n                    color=\"primary\"\n                  />\n                </TooltipWrapper>\n              )}\n            </Fragment>\n          )}\n        </Grid>\n      </Grid>\n    </ModalWrapper>\n  );\n};\n\nexport default CredentialsPrompt;\n"],"names":["PanelTitleContainer","styled","h1","padding","margin","fontSize","_ref","children","_jsx","selectedGroups","setSelectedGroups","dispatch","useAppDispatch","records","setRecords","useState","loading","isLoading","filter","setFilter","fetchGroups","useCallback","api","invoke","then","res","groups","get","sort","stringSort","catch","err","setModalErrorSnackMessage","useEffect","selGroups","filteredRecords","elementItem","includes","_jsxs","Grid","item","xs","className","ProgressBar","length","Fragment","SearchBox","placeholder","onChange","value","label","DataTable","columns","onSelect","e","targetD","target","checked","elements","push","element","selectedItems","entityName","idField","customPaperHeight","Box","sx","textAlign","closeDeleteModalAndRefresh","deleteOpen","selectedServiceAccount","loadingDelete","setLoadingDelete","ConfirmDialog","title","confirmText","isOpen","titleIcon","ConfirmDeleteIcon","onConfirm","onConfirmDelete","serviceAccounts","deleteServiceAccount","_","async","json","setErrorSnackMessage","errorToHandler","finally","onClose","confirmationContent","style","maxWidth","whiteSpace","wordWrap","noTitle","currentPolicies","useSelector","state","createUser","selectedPolicies","fetchPolicies","policies","listPolicies","_res$data$policies","data","policySort","name","elementKey","setSelectedPolicies","DeleteUser","withSuspense","React","AddToGroup","ListUsers","navigate","useNavigate","setLoading","setDeleteOpen","addGroupOpen","setAddGroupOpen","checkedUsers","setCheckedUsers","displayListUsers","hasPermission","CONSOLE_UI_RESOURCE","listUsersPermissions","viewUser","viewUserPermissions","addUserToGroup","addUserToGroupPermissions","deleteUser","deleteUserPermissions","users","usersSort","accessKey","viewAction","selectionElement","concat","IAM_PAGES","USERS","encodeURIComponent","tableActions","type","onClick","disableButtonFunction","setHelpName","selectedUsers","refresh","open","closeModalAndRefresh","close","unCheckAll","arguments","undefined","closeAddGroupBulk","PageHeaderWrapper","actions","HelpMenu","PageLayout","container","actionsTray","marginRight","SecureComponent","resource","scopes","IAM_SCOPES","ADMIN_DELETE_USER","matchAll","errorProps","disabled","TooltipWrapper","tooltip","permissionTooltipHelper","Button","id","icon","DeleteIcon","variant","ADMIN_ADD_USER_TO_GROUP","GroupsIcon","ADMIN_CREATE_USER","ADMIN_LIST_USER_POLICIES","ADMIN_LIST_GROUPS","S3_ALL_RESOURCES","ADMIN_ATTACH_USER_OR_GROUP_POLICY","AddIcon","USER_ADD","marginBottom","ADMIN_LIST_USERS","itemActions","HelpBox","iconComponent","UsersIcon","help","href","rel","ActionLink","selectedUser","addLoading","setAddLoading","setAccessKey","secretKey","setSecretKey","enabled","setEnabled","getUserInformation","memberOf","status","sendEnabled","trim","ModalWrapper","modalOpen","AddMembersToGroupIcon","noValidate","autoComplete","onSubmit","preventDefault","FormLayout","withBorders","containerPadding","GroupsSelectors","modalStyleUtils","modalButtonBar","resetForm","actualPolicy","setActualPolicy","statePolicies","userPolicy","map","pol","policy","IAMPoliciesIcon","PolicySelectors","selectedPolicy","color","resetSelection","SetUserPoliciesAction","entityType","user","hasPolicy","setSelectedServiceAccount","showNewCredentials","setShowNewCredentials","newServiceAccount","setNewServiceAccount","selectedSAs","setSelectedSAs","deleteMultipleOpen","setDeleteMultipleOpen","editOpen","setEditOpen","fetchRecords","sortedRows","editModalOpen","confirmDeleteServiceAccount","DeleteServiceAccount","DeleteMultipleServiceAccounts","setSnackBarMessage","CredentialsPrompt","closeModal","entity","EditServiceAccount","selectedAccessKey","closePolicyModal","SectionTitle","separator","display","justifyContent","gap","ADMIN_CREATE_SERVICEACCOUNT","ADMIN_UPDATE_SERVICEACCOUNT","ADMIN_REMOVE_SERVICEACCOUNT","ADMIN_LIST_SERVICEACCOUNTS","ACCOUNT_TABLE_COLUMNS","selectSAs","userName","newPassword","setNewPassword","reNewPassword","setReNewPassword","ChangePasswordIcon","event","errorMessage","detailedError","request","newSecretKey","account","changeUserPassword","InputBox","UserDetails","params","useParams","policyOpen","setPolicyOpen","currentGroups","setCurrentGroups","setCurrentPolicies","changeUserPasswordModalOpen","setChangeUserPasswordModalOpen","setHasPolicy","selectedTab","setSelectedTab","enableEnabled","enableUserPermissions","disableEnabled","disableUserPermissions","userLoggedIn","localStorage","getItem","canAssignPolicy","assignIAMPolicyPermissions","canAssignGroup","assignGroupPermissions","viewGroup","getGroupPermissions","group","policyDetailsSort","groupTableActions","GROUPS","ChangeUserGroups","SetUserPolicies","ChangeUserPasswordModal","BackLink","ScreenTitle","width","subTitle","fontWeight","enableDisableUserPermissions","Switch","indicatorLabels","isEnabled","switchOnly","TrashIcon","PasswordKeyIcon","Tabs","currentTabOrPath","onTabClick","options","tabConfig","content","onMouseMove","editServiceAccountPermissions","UserServiceAccountsPanel","POLICIES","FeatureItem","description","height","fontStyle","AddUserHelpBox","flex","border","borderRadius","flexFlow","marginTop","alignItems","HelpIconFilled","ChangeAccessPolicyIcon","UserSelector","autoFocus","setUserName","PasswordSelector","AddUser","secretKeylength","setSendEnabled","CreateUserIcon","helpBox","createUserAsync","unwrap","saveRecord","resetFormAsync","AddUserServiceAccountHelpBox","paddingBottom","ServiceAccountIcon","paddingTop","AddServiceAccount","addSending","setAddSending","getRandomString","isRestrictedByPolicy","setIsRestrictedByPolicy","policyJSON","setPolicyJSON","setName","setDescription","comments","setComments","expiry","setExpiry","expiryDt","toJSDate","toISOString","comment","url","JSON","stringify","parse","ServiceAccountCredentialsIcon","addUserServiceAccount","startIcon","HelpTip","placement","PanelTitle","_objectSpread","formScrollable","CodeMirrorWrapper","editorHeight","helptip","DateTimeInput","noLabelMinWidth","timeFormat","secondsSelector","Users","Routes","Route","path","AddUserScreen","AddUserServiceAccountScreen","NotFoundPage","loadingSA","setLoadingSA","hasSA","setHasSA","userSAList","setUserSAList","deleteLoading","setDeleteLoading","checkUserServiceAccounts","_res$data$userService","userServiceAccountList","error","renderUsers","noSAtext","removeUser","Loader","InformativeMessage","message","InputLabel","ReadBox","actionButton","CopyToClipboard","text","setModalSnackMessage","CopyIcon","WarningBlock","div","theme","download","filename","document","createElement","setAttribute","body","appendChild","click","removeChild","_ref2","consoleCreds","idp","overflowY","maxHeight","Array","isArray","credentialsPair","index","CredentialItem","_Fragment","WarnIcon","downloadImport","consoleExtras","itemMap","DownloadIcon","downloaddAllCredentials","allCredentials"],"sourceRoot":""}