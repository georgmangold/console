{"version":3,"file":"static/js/7485.d9b5001c.chunk.js","mappings":"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","sources":["screens/Console/IDP/DeleteIDPConfigurationModal.tsx","screens/Console/IDP/IDPConfigurations.tsx","screens/Console/IDP/IDPOpenIDConfigurations.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useState } from \"react\";\nimport { ConfirmDeleteIcon } from \"mds\";\nimport {\n  setErrorSnackMessage,\n  setServerNeedsRestart,\n} from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport ConfirmDialog from \"../Common/ModalWrapper/ConfirmDialog\";\nimport { api } from \"api\";\nimport { SetIDPResponse } from \"../../../api/consoleApi\";\nimport { errorToHandler } from \"../../../api/errors\";\n\ninterface IDeleteIDPConfigurationModalProps {\n  closeDeleteModalAndRefresh: (refresh: boolean) => void;\n  deleteOpen: boolean;\n  idp: string;\n  idpType: string;\n}\n\nconst DeleteIDPConfigurationModal = ({\n  closeDeleteModalAndRefresh,\n  deleteOpen,\n  idp,\n  idpType,\n}: IDeleteIDPConfigurationModalProps) => {\n  const dispatch = useAppDispatch();\n  const onDelSuccess = (res: SetIDPResponse) => {\n    closeDeleteModalAndRefresh(true);\n    dispatch(setServerNeedsRestart(res.restart === true));\n  };\n\n  const onClose = () => closeDeleteModalAndRefresh(false);\n  const [deleteLoading, setDeleteLoading] = useState<boolean>(false);\n\n  if (!idp) {\n    return null;\n  }\n\n  const onConfirmDelete = () => {\n    setDeleteLoading(true);\n    api.idp\n      .deleteConfiguration(idp, idpType)\n      .then((res) => {\n        onDelSuccess(res.data);\n      })\n      .catch((err) => dispatch(setErrorSnackMessage(errorToHandler(err.error))))\n      .finally(() => setDeleteLoading(false));\n  };\n\n  const displayName = idp === \"_\" ? \"Default\" : idp;\n\n  return (\n    <ConfirmDialog\n      title={`Delete ${displayName}`}\n      confirmText={\"Delete\"}\n      isOpen={deleteOpen}\n      titleIcon={<ConfirmDeleteIcon />}\n      isLoading={deleteLoading}\n      onConfirm={onConfirmDelete}\n      onClose={onClose}\n      confirmButtonProps={{\n        disabled: deleteLoading,\n      }}\n      confirmationContent={\n        <Fragment>\n          Are you sure you want to delete IDP <b>{displayName}</b>{\" \"}\n          configuration? <br />\n        </Fragment>\n      }\n    />\n  );\n};\n\nexport default DeleteIDPConfigurationModal;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { AddIcon, Button, PageLayout, RefreshIcon, Grid, DataTable } from \"mds\";\nimport { useNavigate } from \"react-router-dom\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport { useAppDispatch } from \"../../../store\";\nimport {\n  CONSOLE_UI_RESOURCE,\n  IAM_SCOPES,\n} from \"../../../common/SecureComponent/permissions\";\nimport {\n  hasPermission,\n  SecureComponent,\n} from \"../../../common/SecureComponent\";\nimport { setErrorSnackMessage, setHelpName } from \"../../../systemSlice\";\nimport { actionsTray } from \"../Common/FormComponents/common/styleLibrary\";\nimport TooltipWrapper from \"../Common/TooltipWrapper/TooltipWrapper\";\nimport DeleteIDPConfigurationModal from \"./DeleteIDPConfigurationModal\";\nimport PageHeaderWrapper from \"../Common/PageHeaderWrapper/PageHeaderWrapper\";\nimport HelpMenu from \"../HelpMenu\";\n\ntype IDPConfigurationsProps = {\n  idpType: string;\n};\n\nconst IDPConfigurations = ({ idpType }: IDPConfigurationsProps) => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const [deleteOpen, setDeleteOpen] = useState<boolean>(false);\n  const [selectedIDP, setSelectedIDP] = useState<string>(\"\");\n  const [loading, setLoading] = useState<boolean>(false);\n  const [records, setRecords] = useState<any[]>([]);\n\n  const deleteIDP = hasPermission(CONSOLE_UI_RESOURCE, [\n    IAM_SCOPES.ADMIN_CONFIG_UPDATE,\n  ]);\n\n  const viewIDP = hasPermission(CONSOLE_UI_RESOURCE, [\n    IAM_SCOPES.ADMIN_CONFIG_UPDATE,\n  ]);\n\n  const displayIDPs = hasPermission(CONSOLE_UI_RESOURCE, [\n    IAM_SCOPES.ADMIN_CONFIG_UPDATE,\n  ]);\n\n  useEffect(() => {\n    fetchRecords();\n  }, []);\n\n  useEffect(() => {\n    if (loading) {\n      if (displayIDPs) {\n        api.idp\n          .listConfigurations(idpType)\n          .then((res) => {\n            setLoading(false);\n            if (res.data.results) {\n              setRecords(\n                res.data.results.map((r: any) => {\n                  r.name = r.name === \"_\" ? \"Default\" : r.name;\n                  r.enabled = r.enabled === true ? \"Enabled\" : \"Disabled\";\n                  return r;\n                }),\n              );\n            }\n          })\n          .catch((err) => {\n            setLoading(false);\n            dispatch(setErrorSnackMessage(errorToHandler(err.error)));\n          });\n      } else {\n        setLoading(false);\n      }\n    }\n  }, [loading, setLoading, setRecords, dispatch, displayIDPs, idpType]);\n\n  const fetchRecords = () => {\n    setLoading(true);\n  };\n\n  const confirmDeleteIDP = (idp: string) => {\n    setDeleteOpen(true);\n    idp = idp === \"Default\" ? \"_\" : idp;\n    setSelectedIDP(idp);\n  };\n\n  const viewAction = (idp: any) => {\n    let name = idp.name === \"Default\" ? \"_\" : idp.name;\n    navigate(`/identity/idp/${idpType}/configurations/${name}`);\n  };\n\n  const closeDeleteModalAndRefresh = async (refresh: boolean) => {\n    setDeleteOpen(false);\n\n    if (refresh) {\n      fetchRecords();\n    }\n  };\n\n  const tableActions = [\n    {\n      type: \"view\",\n      onClick: viewAction,\n      disableButtonFunction: () => !viewIDP,\n    },\n    {\n      type: \"delete\",\n      onClick: confirmDeleteIDP,\n      sendOnlyId: true,\n      disableButtonFunction: (idp: string) => !deleteIDP || idp === \"Default\",\n    },\n  ];\n\n  useEffect(() => {\n    dispatch(setHelpName(\"idp_configs\"));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Fragment>\n      {deleteOpen && (\n        <DeleteIDPConfigurationModal\n          deleteOpen={deleteOpen}\n          idp={selectedIDP}\n          idpType={idpType}\n          closeDeleteModalAndRefresh={closeDeleteModalAndRefresh}\n        />\n      )}\n      <PageHeaderWrapper\n        label={`${idpType.toUpperCase()} Configurations`}\n        actions={<HelpMenu />}\n      />\n      <PageLayout>\n        <Grid container>\n          <Grid\n            item\n            xs={12}\n            sx={{\n              ...actionsTray.actionsTray,\n              justifyContent: \"flex-end\",\n              gap: 8,\n            }}\n          >\n            <SecureComponent\n              scopes={[IAM_SCOPES.ADMIN_CONFIG_UPDATE]}\n              resource={CONSOLE_UI_RESOURCE}\n              errorProps={{ disabled: true }}\n            >\n              <TooltipWrapper tooltip={\"Refresh\"}>\n                <Button\n                  id={\"refresh-keys\"}\n                  variant=\"regular\"\n                  icon={<RefreshIcon />}\n                  onClick={() => setLoading(true)}\n                />\n              </TooltipWrapper>\n            </SecureComponent>\n            <SecureComponent\n              scopes={[IAM_SCOPES.ADMIN_CONFIG_UPDATE]}\n              resource={CONSOLE_UI_RESOURCE}\n              errorProps={{ disabled: true }}\n            >\n              <TooltipWrapper tooltip={`Create ${idpType} configuration`}>\n                <Button\n                  id={\"create-idp\"}\n                  label={\"Create Configuration\"}\n                  variant={\"callAction\"}\n                  icon={<AddIcon />}\n                  onClick={() =>\n                    navigate(`/identity/idp/${idpType}/configurations/add-idp`)\n                  }\n                />\n              </TooltipWrapper>\n            </SecureComponent>\n          </Grid>\n          <Grid item xs={12}>\n            <SecureComponent\n              scopes={[IAM_SCOPES.ADMIN_CONFIG_UPDATE]}\n              resource={CONSOLE_UI_RESOURCE}\n              errorProps={{ disabled: true }}\n            >\n              <DataTable\n                itemActions={tableActions}\n                columns={[\n                  { label: \"Name\", elementKey: \"name\" },\n                  { label: \"Type\", elementKey: \"type\" },\n                  { label: \"Enabled\", elementKey: \"enabled\" },\n                ]}\n                isLoading={loading}\n                records={records}\n                entityName=\"Keys\"\n                idField=\"name\"\n              />\n            </SecureComponent>\n          </Grid>\n        </Grid>\n      </PageLayout>\n    </Fragment>\n  );\n};\n\nexport default IDPConfigurations;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport IDPConfigurations from \"./IDPConfigurations\";\n\nconst IDPOpenIDConfigurations = () => {\n  return <IDPConfigurations idpType={\"openid\"} />;\n};\n\nexport default IDPOpenIDConfigurations;\n"],"names":["_ref","closeDeleteModalAndRefresh","deleteOpen","idp","idpType","dispatch","useAppDispatch","deleteLoading","setDeleteLoading","useState","displayName","_jsx","ConfirmDialog","title","concat","confirmText","isOpen","titleIcon","ConfirmDeleteIcon","isLoading","onConfirm","onConfirmDelete","api","deleteConfiguration","then","res","setServerNeedsRestart","restart","onDelSuccess","data","catch","err","setErrorSnackMessage","errorToHandler","error","finally","onClose","confirmButtonProps","disabled","confirmationContent","_jsxs","Fragment","children","navigate","useNavigate","setDeleteOpen","selectedIDP","setSelectedIDP","loading","setLoading","records","setRecords","deleteIDP","hasPermission","CONSOLE_UI_RESOURCE","IAM_SCOPES","ADMIN_CONFIG_UPDATE","viewIDP","displayIDPs","useEffect","fetchRecords","listConfigurations","results","map","r","name","enabled","tableActions","type","onClick","disableButtonFunction","sendOnlyId","setHelpName","DeleteIDPConfigurationModal","async","refresh","PageHeaderWrapper","label","toUpperCase","actions","HelpMenu","PageLayout","Grid","container","item","xs","sx","_objectSpread","actionsTray","justifyContent","gap","SecureComponent","scopes","resource","errorProps","TooltipWrapper","tooltip","Button","id","variant","icon","RefreshIcon","AddIcon","DataTable","itemActions","columns","elementKey","entityName","idField","IDPOpenIDConfigurations","IDPConfigurations"],"sourceRoot":""}