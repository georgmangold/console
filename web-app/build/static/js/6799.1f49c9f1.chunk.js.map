{"version":3,"file":"static/js/6799.1f49c9f1.chunk.js","mappings":"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","sources":["screens/Console/Common/ModalWrapper/ModalWrapper.tsx","screens/Console/Buckets/BucketDetails/EditAccessRule.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ModalBox, Snackbar } from \"mds\";\nimport { CSSObject } from \"styled-components\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport { setModalSnackMessage } from \"../../../../systemSlice\";\nimport MainError from \"../MainError/MainError\";\n\ninterface IModalProps {\n  onClose: () => void;\n  modalOpen: boolean;\n  title: string | React.ReactNode;\n  children: any;\n  wideLimit?: boolean;\n  titleIcon?: React.ReactNode;\n  iconColor?: \"default\" | \"delete\" | \"accept\";\n  sx?: CSSObject;\n}\n\nconst ModalWrapper = ({\n  onClose,\n  modalOpen,\n  title,\n  children,\n  wideLimit = true,\n  titleIcon = null,\n  iconColor = \"default\",\n  sx,\n}: IModalProps) => {\n  const dispatch = useAppDispatch();\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\n\n  const modalSnackMessage = useSelector(\n    (state: AppState) => state.system.modalSnackBar,\n  );\n\n  useEffect(() => {\n    dispatch(setModalSnackMessage(\"\"));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (modalSnackMessage) {\n      if (modalSnackMessage.message === \"\") {\n        setOpenSnackbar(false);\n        return;\n      }\n      // Open SnackBar\n      if (modalSnackMessage.type !== \"error\") {\n        setOpenSnackbar(true);\n      }\n    }\n  }, [modalSnackMessage]);\n\n  const closeSnackBar = () => {\n    setOpenSnackbar(false);\n    dispatch(setModalSnackMessage(\"\"));\n  };\n\n  let message = \"\";\n\n  if (modalSnackMessage) {\n    message = modalSnackMessage.detailedErrorMsg;\n    if (message === \"\" || (message && message.length < 5)) {\n      message = modalSnackMessage.message;\n    }\n  }\n\n  return (\n    <ModalBox\n      onClose={onClose}\n      open={modalOpen}\n      title={title}\n      titleIcon={titleIcon}\n      widthLimit={wideLimit}\n      sx={sx}\n      iconColor={iconColor}\n    >\n      <MainError isModal={true} />\n      <Snackbar\n        onClose={closeSnackBar}\n        open={openSnackbar}\n        message={message}\n        mode={\"inline\"}\n        variant={modalSnackMessage.type === \"error\" ? \"error\" : \"default\"}\n        autoHideDuration={modalSnackMessage.type === \"error\" ? 10 : 5}\n        condensed\n      />\n      {children}\n    </ModalBox>\n  );\n};\n\nexport default ModalWrapper;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useState } from \"react\";\nimport { AddAccessRuleIcon, Button, FormLayout, Grid, Select } from \"mds\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport { modalStyleUtils } from \"../../Common/FormComponents/common/styleLibrary\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\n\ninterface IEditAccessRule {\n  modalOpen: boolean;\n  onClose: () => any;\n  bucket: string;\n  toEdit: string;\n  initial: string;\n}\n\nconst EditAccessRule = ({\n  modalOpen,\n  onClose,\n  bucket,\n  toEdit,\n  initial,\n}: IEditAccessRule) => {\n  const dispatch = useAppDispatch();\n  const [selectedAccess, setSelectedAccess] = useState<any>(initial);\n\n  const accessOptions = [\n    { label: \"readonly\", value: \"readonly\" },\n    { label: \"writeonly\", value: \"writeonly\" },\n    { label: \"readwrite\", value: \"readwrite\" },\n  ];\n\n  const resetForm = () => {\n    setSelectedAccess(initial);\n  };\n\n  const createProcess = () => {\n    api.bucket\n      .setAccessRuleWithBucket(bucket, {\n        prefix: toEdit,\n        access: selectedAccess,\n      })\n      .then(() => {\n        onClose();\n      })\n      .catch((err) => {\n        dispatch(setErrorSnackMessage(errorToHandler(err.error)));\n        onClose();\n      });\n  };\n\n  return (\n    <Fragment>\n      <ModalWrapper\n        modalOpen={modalOpen}\n        title={`Edit Anonymous Access Rule for ${`${bucket}/${toEdit || \"\"}`}`}\n        onClose={onClose}\n        titleIcon={<AddAccessRuleIcon />}\n      >\n        <FormLayout containerPadding={false} withBorders={false}>\n          <Select\n            id=\"access\"\n            name=\"Access\"\n            onChange={(value) => {\n              setSelectedAccess(value);\n            }}\n            label=\"Access\"\n            value={selectedAccess}\n            options={accessOptions}\n            disabled={false}\n          />\n        </FormLayout>\n        <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n          <Button\n            id={\"clear\"}\n            type=\"button\"\n            variant=\"regular\"\n            onClick={resetForm}\n            label={\"Clear\"}\n          />\n          <Button\n            id={\"save\"}\n            type=\"submit\"\n            variant=\"callAction\"\n            onClick={createProcess}\n            label={\"Save\"}\n          />\n        </Grid>\n      </ModalWrapper>\n    </Fragment>\n  );\n};\n\nexport default EditAccessRule;\n"],"names":["_ref","onClose","modalOpen","title","children","wideLimit","titleIcon","iconColor","sx","dispatch","useAppDispatch","openSnackbar","setOpenSnackbar","useState","modalSnackMessage","useSelector","state","system","modalSnackBar","useEffect","setModalSnackMessage","message","type","detailedErrorMsg","length","_jsxs","ModalBox","open","widthLimit","_jsx","MainError","isModal","Snackbar","closeSnackBar","mode","variant","autoHideDuration","condensed","bucket","toEdit","initial","selectedAccess","setSelectedAccess","Fragment","ModalWrapper","concat","AddAccessRuleIcon","FormLayout","containerPadding","withBorders","Select","id","name","onChange","value","label","options","disabled","Grid","item","xs","modalStyleUtils","modalButtonBar","Button","onClick","resetForm","createProcess","api","setAccessRuleWithBucket","prefix","access","then","catch","err","setErrorSnackMessage","errorToHandler","error"],"sourceRoot":""}