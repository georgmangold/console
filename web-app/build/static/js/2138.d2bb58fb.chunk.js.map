{"version":3,"file":"static/js/2138.d2bb58fb.chunk.js","mappings":"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","sources":["screens/Console/IDP/LDAP/LDAPResultsBlock.tsx","screens/Console/IDP/LDAP/LDAPEntitiesQuery.tsx","screens/Console/IDP/LDAP/IDPLDAPConfigurationDetails.tsx","utils/sortFunctions.ts","screens/Console/IDP/AddIDPConfigurationHelpbox.tsx","screens/Console/IDP/utils.tsx","screens/Console/Policies/PolicySelectors.tsx","screens/Console/EventDestinations/CustomForms/ResetConfigurationModal.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport { Box, CollapseCaret, GroupsMenuIcon, SectionTitle } from \"mds\";\nimport { LdapEntities } from \"api/consoleApi\";\n\ninterface IResultBlock {\n  entityName: \"Group\" | \"User\" | \"Policy\";\n  results: LdapEntities;\n}\n\ninterface IEntityResultName {\n  name: string;\n}\n\ninterface IEntityResultItem {\n  blockName: \"Policies\" | \"Groups\" | \"Users\";\n  results: string[];\n}\n\nconst EntityResultTitle = ({ name }: IEntityResultName) => {\n  return (\n    <h4>\n      <CollapseCaret style={{ transform: \"rotateZ(90deg)\" }} />\n      {name}\n    </h4>\n  );\n};\n\nconst EntityResultItems = ({ blockName, results }: IEntityResultItem) => {\n  return (\n    <Fragment>\n      <strong>{blockName}:</strong>\n      <ul>\n        {results.map((res, index) => (\n          <li key={`policy-${blockName}-${index}`}>{res}</li>\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nconst LDAPResultsBlock = ({ entityName, results }: IResultBlock) => {\n  let entityLength = 0;\n\n  switch (entityName) {\n    case \"Group\":\n      entityLength = results.groups?.length || 0;\n      break;\n    case \"Policy\":\n      entityLength = results.policies?.length || 0;\n      break;\n    case \"User\":\n      entityLength = results.users?.length || 0;\n      break;\n  }\n\n  return (\n    <Box\n      className={\"resultElement\"}\n      sx={{\n        marginTop: 50,\n        \"&:first-of-type\": {\n          marginTop: 0,\n        },\n      }}\n    >\n      <SectionTitle\n        separator\n        sx={{ fontSize: 12 }}\n        icon={<GroupsMenuIcon style={{ width: 17, height: 17 }} />}\n        actions={\n          <Box sx={{ fontSize: 14 }}>\n            <strong>{entityLength}</strong> Entit\n            {entityLength === 1 ? \"y\" : \"ies\"} Found\n          </Box>\n        }\n      >\n        {entityName} Mappings\n      </SectionTitle>\n      <Box\n        className={\"resultsList\"}\n        sx={{\n          h4: {\n            borderBottom: \"#e2e2e2 1px solid\",\n            padding: \"12px 0\",\n            margin: 0,\n            marginBottom: 15,\n            display: \"flex\",\n            alignItems: \"center\",\n            \"& svg\": {\n              marginRight: 10,\n              fill: \"#3C77A7\",\n            },\n          },\n        }}\n      >\n        {entityName === \"Group\" &&\n          results.groups?.map((groupData, index) => {\n            return (\n              <Fragment key={`policy-res-${index}`}>\n                <EntityResultTitle name={groupData.group || \"\"} />\n                {groupData.policies && (\n                  <EntityResultItems\n                    blockName={\"Policies\"}\n                    results={groupData.policies}\n                  />\n                )}\n              </Fragment>\n            );\n          })}\n        {entityName === \"User\" &&\n          results.users?.map((groupData, index) => {\n            return (\n              <Fragment key={`users-res-${index}`}>\n                <EntityResultTitle name={groupData.user || \"\"} />\n                {groupData.policies && (\n                  <EntityResultItems\n                    blockName={\"Policies\"}\n                    results={groupData.policies}\n                  />\n                )}\n              </Fragment>\n            );\n          })}\n        {entityName === \"Policy\" &&\n          results.policies?.map((groupData, index) => {\n            return (\n              <Fragment key={`policy-map-${index}`}>\n                <EntityResultTitle name={groupData.policy || \"\"} />\n                {groupData.groups && (\n                  <EntityResultItems\n                    blockName={\"Groups\"}\n                    results={groupData.groups}\n                  />\n                )}\n                {groupData.users && (\n                  <EntityResultItems\n                    blockName={\"Users\"}\n                    results={groupData.users}\n                  />\n                )}\n              </Fragment>\n            );\n          })}\n      </Box>\n    </Box>\n  );\n};\n\nexport default LDAPResultsBlock;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useState } from \"react\";\nimport {\n  AddIcon,\n  Box,\n  Button,\n  Grid,\n  InputBox,\n  Loader,\n  RemoveIcon,\n  SearchIcon,\n  SectionTitle,\n  TimeIcon,\n} from \"mds\";\nimport { useSelector } from \"react-redux\";\nimport { DateTime } from \"luxon\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport { LdapEntities } from \"api/consoleApi\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport LDAPResultsBlock from \"./LDAPResultsBlock\";\nimport PolicySelectors from \"../../Policies/PolicySelectors\";\n\nconst LDAPEntitiesQuery = () => {\n  const dispatch = useAppDispatch();\n\n  const [loading, setLoading] = useState<boolean>(false);\n  const [users, setUsers] = useState<string[]>([\"\"]);\n  const [groups, setGroups] = useState<string[]>([\"\"]);\n  const [results, setResults] = useState<LdapEntities | null>(null);\n\n  const selectedPolicies = useSelector(\n    (state: AppState) => state.createUser.selectedPolicies,\n  );\n\n  const searchEntities = () => {\n    setLoading(true);\n\n    let data: any = {};\n\n    let cleanPolicies = selectedPolicies.filter((pol) => pol !== \"\");\n    let cleanUsers = users.filter((usr) => usr !== \"\");\n    let cleanGroups = groups.filter((grp) => grp !== \"\");\n\n    if (cleanPolicies.length > 0) {\n      data[\"policies\"] = cleanPolicies;\n    }\n\n    if (cleanUsers.length > 0) {\n      data[\"users\"] = cleanUsers;\n    }\n\n    if (cleanGroups.length > 0) {\n      data[\"groups\"] = cleanGroups;\n    }\n\n    api.ldapEntities\n      .getLdapEntities(data)\n      .then((result) => {\n        setResults(result.data);\n        setLoading(false);\n      })\n      .catch((err) => {\n        dispatch(setErrorSnackMessage(errorToHandler(err.error)));\n        setLoading(false);\n      });\n  };\n\n  const alterUsersList = (addItem: boolean, index: number) => {\n    if (addItem) {\n      const alterUsers = [...users, \"\"];\n      setUsers(alterUsers);\n\n      return;\n    }\n\n    const filteredUsers = users.filter((_, indx) => indx !== index);\n\n    setUsers(filteredUsers);\n  };\n\n  const alterGroupsList = (addItem: boolean, index: number) => {\n    if (addItem) {\n      const alterGroups = [...groups, \"\"];\n      setGroups(alterGroups);\n\n      return;\n    }\n\n    const filteredGroups = groups.filter((_, indx) => indx !== index);\n\n    setGroups(filteredGroups);\n  };\n\n  return (\n    <Box sx={{ marginTop: 15, paddingTop: 0 }}>\n      <Grid container sx={{ marginTop: 5 }}>\n        <Grid item sm={12} md={6} lg={5} sx={{ padding: 10, paddingTop: 0 }}>\n          <SectionTitle>Query Filters</SectionTitle>\n\n          <Box\n            sx={{\n              padding: \"0 10px\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              gap: 40,\n            }}\n          >\n            <Box sx={{ padding: \"10px 26px\" }} withBorders>\n              <Box sx={{ display: \"flex\" }}>\n                <h4 style={{ margin: 0, marginBottom: 10, fontSize: 14 }}>\n                  Users\n                </h4>\n              </Box>\n              <Box\n                sx={{\n                  overflowY: \"auto\",\n                  minHeight: 50,\n                  maxHeight: 250,\n                  \"& > div > div\": {\n                    width: \"100%\",\n                  },\n                }}\n              >\n                {users.map((userDat, index) => {\n                  return (\n                    <InputBox\n                      id={`search-user-${index}`}\n                      key={`search-user-${index}`}\n                      value={userDat}\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        const usersElements = [...users];\n                        usersElements[index] = e.target.value;\n                        setUsers(usersElements);\n                      }}\n                      overlayIcon={\n                        users.length === index + 1 ? (\n                          <AddIcon />\n                        ) : (\n                          <RemoveIcon />\n                        )\n                      }\n                      overlayAction={() => {\n                        alterUsersList(users.length === index + 1, index);\n                      }}\n                    />\n                  );\n                })}\n              </Box>\n            </Box>\n            <Box sx={{ padding: \"10px 26px\" }} withBorders>\n              <h4 style={{ margin: 0, marginBottom: 10, fontSize: 14 }}>\n                Groups\n              </h4>\n              <Box\n                sx={{\n                  overflowY: \"auto\",\n                  minHeight: 50,\n                  maxHeight: \"calc(100vh - 340px)\",\n                  \"& > div > div\": {\n                    width: \"100%\",\n                  },\n                }}\n              >\n                {groups.map((groupDat, index) => {\n                  return (\n                    <InputBox\n                      id={`search-group-${index}`}\n                      key={`search-group-${index}`}\n                      value={groupDat}\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        const groupsElements = [...groups];\n                        groupsElements[index] = e.target.value;\n                        setGroups(groupsElements);\n                      }}\n                      overlayIcon={\n                        groups.length === index + 1 ? (\n                          <AddIcon />\n                        ) : (\n                          <RemoveIcon />\n                        )\n                      }\n                      overlayAction={() => {\n                        alterGroupsList(groups.length === index + 1, index);\n                      }}\n                    />\n                  );\n                })}\n              </Box>\n            </Box>\n            <Box sx={{ padding: \"10px 26px\" }} withBorders>\n              <h4 style={{ margin: 0, marginBottom: 10, fontSize: 14 }}>\n                Policies\n              </h4>\n              <Box\n                sx={{\n                  minHeight: 265,\n                  maxHeight: \"calc(100vh - 740px)\",\n                }}\n              >\n                <PolicySelectors selectedPolicy={selectedPolicies} noTitle />\n              </Box>\n            </Box>\n          </Box>\n        </Grid>\n        <Grid\n          item\n          sm={12}\n          md={6}\n          lg={7}\n          sx={{\n            padding: 10,\n            paddingTop: 0,\n            display: \"flex\",\n            flexDirection: \"column\",\n          }}\n        >\n          {loading ? (\n            <Box sx={{ textAlign: \"center\" }}>\n              <Loader />\n            </Box>\n          ) : (\n            <Fragment>\n              <SectionTitle\n                actions={\n                  <Box\n                    sx={{\n                      display: \"flex\",\n                      flexDirection: \"row\",\n                      alignItems: \"center\",\n                      fontSize: 14,\n                    }}\n                  >\n                    {results?.timestamp ? (\n                      <Fragment>\n                        <TimeIcon\n                          style={{\n                            width: 14,\n                            height: 14,\n                            marginRight: 5,\n                            fill: \"#BEBFBF\",\n                          }}\n                        />\n                        {DateTime.fromISO(results.timestamp).toFormat(\n                          \"D HH:mm:ss\",\n                        )}\n                      </Fragment>\n                    ) : (\n                      \"\"\n                    )}\n                  </Box>\n                }\n              >\n                Query Results\n              </SectionTitle>\n              {results ? (\n                <Box\n                  sx={{\n                    backgroundColor: \"#FBFAFA\",\n                    padding: \"8px 22px\",\n                    flexGrow: 1,\n                    overflowY: \"auto\",\n                  }}\n                >\n                  {!results.groups && !results.users && !results.policies && (\n                    <Box sx={{ textAlign: \"center\" }}>\n                      <h4>No Results Available</h4>\n                    </Box>\n                  )}\n                  {!!results.groups && (\n                    <LDAPResultsBlock results={results} entityName={\"Group\"} />\n                  )}\n                  {!!results.users && (\n                    <LDAPResultsBlock results={results} entityName={\"User\"} />\n                  )}\n                  {!!results.policies && (\n                    <LDAPResultsBlock results={results} entityName={\"Policy\"} />\n                  )}\n                </Box>\n              ) : (\n                <Box sx={{ textAlign: \"center\" }}>No query results yet</Box>\n              )}\n            </Fragment>\n          )}\n        </Grid>\n      </Grid>\n      <Grid container>\n        <Grid\n          item\n          xs={12}\n          sx={{\n            display: \"flex\",\n            justifyContent: \"flex-start\",\n            marginTop: 45,\n            padding: \"0 20px\",\n          }}\n        >\n          <Button\n            id={\"search-entity\"}\n            type={\"button\"}\n            variant={\"callAction\"}\n            onClick={searchEntities}\n            icon={<SearchIcon />}\n          >\n            Search\n          </Button>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default LDAPEntitiesQuery;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport {\n  Box,\n  Button,\n  ConsoleIcon,\n  EditIcon,\n  FormLayout,\n  Grid,\n  HelpBox,\n  InputBox,\n  Loader,\n  PageLayout,\n  RefreshIcon,\n  Switch,\n  Tabs,\n  Tooltip,\n  ValuePair,\n  WarnIcon,\n  ScreenTitle,\n} from \"mds\";\nimport { api } from \"api\";\nimport { ConfigurationKV } from \"api/consoleApi\";\nimport { errorToHandler } from \"api/errors\";\nimport { useAppDispatch } from \"../../../../store\";\nimport {\n  setErrorSnackMessage,\n  setHelpName,\n  setServerNeedsRestart,\n  setSnackBarMessage,\n} from \"../../../../systemSlice\";\nimport { ldapFormFields, ldapHelpBoxContents } from \"../utils\";\nimport PageHeaderWrapper from \"../../Common/PageHeaderWrapper/PageHeaderWrapper\";\nimport AddIDPConfigurationHelpBox from \"../AddIDPConfigurationHelpbox\";\nimport LDAPEntitiesQuery from \"./LDAPEntitiesQuery\";\nimport ResetConfigurationModal from \"../../EventDestinations/CustomForms/ResetConfigurationModal\";\nimport HelpMenu from \"../../HelpMenu\";\n\nconst enabledConfigLDAP = [\n  \"server_addr\",\n  \"lookup_bind_dn\",\n  \"user_dn_search_base_dn\",\n  \"user_dn_search_filter\",\n];\n\nconst IDPLDAPConfigurationDetails = () => {\n  const dispatch = useAppDispatch();\n\n  const formFields = ldapFormFields;\n\n  const [loading, setLoading] = useState<boolean>(true);\n  const [isEnabled, setIsEnabled] = useState<boolean>(false);\n  const [hasConfiguration, setHasConfiguration] = useState<boolean>(false);\n  const [fields, setFields] = useState<any>({});\n  const [overrideFields, setOverrideFields] = useState<any>({});\n  const [record, setRecord] = useState<ConfigurationKV[] | undefined>(\n    undefined,\n  );\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const [resetOpen, setResetOpen] = useState<boolean>(false);\n  const [curTab, setCurTab] = useState<string>(\"configuration\");\n  const [envOverride, setEnvOverride] = useState<boolean>(false);\n\n  const toggleEditMode = () => {\n    if (editMode && record) {\n      parseFields(record);\n    }\n    setEditMode(!editMode);\n  };\n\n  const parseFields = (record: ConfigurationKV[]) => {\n    let fields: any = {};\n    let ovrFlds: any = {};\n    if (record && record.length > 0) {\n      const enabled = record.find((item: any) => item.key === \"enable\");\n\n      let totalCoincidences = 0;\n      let totalOverride = 0;\n\n      record.forEach((item: any) => {\n        if (item.env_override) {\n          fields[item.key] = item.env_override.value;\n          ovrFlds[item.key] = item.env_override.name;\n        } else {\n          fields[item.key] = item.value;\n        }\n\n        if (\n          enabledConfigLDAP.includes(item.key) &&\n          ((item.value && item.value !== \"\" && item.value !== \"off\") ||\n            (item.env_override &&\n              item.env_override.value !== \"\" &&\n              item.env_override.value !== \"off\"))\n        ) {\n          totalCoincidences++;\n        }\n\n        if (enabledConfigLDAP.includes(item.key) && item.env_override) {\n          totalOverride++;\n        }\n      });\n\n      const hasConfig = totalCoincidences !== 0;\n\n      if (hasConfig && ((enabled && enabled.value !== \"off\") || !enabled)) {\n        setIsEnabled(true);\n      } else {\n        setIsEnabled(false);\n      }\n\n      if (totalOverride !== 0) {\n        setEnvOverride(true);\n      }\n\n      setHasConfiguration(hasConfig);\n    }\n    setOverrideFields(ovrFlds);\n    setFields(fields);\n  };\n\n  useEffect(() => {\n    const loadRecord = () => {\n      api.configs\n        .configInfo(\"identity_ldap\")\n        .then((res) => {\n          if (res.data.length > 0) {\n            setRecord(res.data[0].key_values);\n            parseFields(res.data[0].key_values || []);\n          }\n          setLoading(false);\n        })\n        .catch((err) => {\n          setLoading(false);\n          dispatch(setErrorSnackMessage(errorToHandler(err.error)));\n        });\n    };\n\n    if (loading) {\n      loadRecord();\n    }\n  }, [dispatch, loading]);\n\n  const validSave = () => {\n    for (const [key, value] of Object.entries(formFields)) {\n      if (\n        value.required &&\n        !(\n          fields[key] !== undefined &&\n          fields[key] !== null &&\n          fields[key] !== \"\"\n        )\n      ) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const saveRecord = () => {\n    const keyVals = Object.keys(formFields).map((key) => {\n      return {\n        key,\n        value: fields[key],\n      };\n    });\n\n    api.configs\n      .setConfig(\"identity_ldap\", {\n        key_values: keyVals,\n      })\n      .then((res) => {\n        setEditMode(false);\n        setRecord(keyVals);\n        parseFields(keyVals);\n        dispatch(setServerNeedsRestart(res.data.restart || false));\n        setFields({ ...fields, lookup_bind_password: \"\" });\n\n        if (!res.data.restart) {\n          dispatch(setSnackBarMessage(\"Configuration saved successfully\"));\n        }\n      })\n      .catch((err) => {\n        dispatch(setErrorSnackMessage(errorToHandler(err.error)));\n      });\n  };\n\n  const closeDeleteModalAndRefresh = async (refresh: boolean) => {\n    setResetOpen(false);\n\n    if (refresh) {\n      dispatch(setServerNeedsRestart(refresh));\n      setRecord(undefined);\n      setFields({});\n      setIsEnabled(false);\n      setHasConfiguration(false);\n      setEditMode(false);\n    }\n  };\n\n  const toggleConfiguration = (value: boolean) => {\n    const payload = {\n      key_values: [\n        {\n          key: \"enable\",\n          value: value ? \"on\" : \"off\",\n        },\n      ],\n    };\n\n    api.configs\n      .setConfig(\"identity_ldap\", payload)\n      .then((res) => {\n        setIsEnabled(!isEnabled);\n        dispatch(setServerNeedsRestart(res.data.restart || false));\n        if (!res.data.restart) {\n          dispatch(setSnackBarMessage(\"Configuration saved successfully\"));\n        }\n      })\n      .catch((err) => {\n        dispatch(setErrorSnackMessage(errorToHandler(err.error)));\n      });\n  };\n\n  const renderFormField = (key: string, value: any) => {\n    switch (value.type) {\n      case \"toggle\":\n        return (\n          <Switch\n            key={key}\n            indicatorLabels={[\"Enabled\", \"Disabled\"]}\n            checked={fields[key] === \"on\"}\n            value={\"is-field-enabled\"}\n            id={\"is-field-enabled\"}\n            name={\"is-field-enabled\"}\n            label={value.label}\n            tooltip={value.tooltip}\n            onChange={(e) =>\n              setFields({ ...fields, [key]: e.target.checked ? \"on\" : \"off\" })\n            }\n            description=\"\"\n            disabled={!editMode}\n          />\n        );\n      default:\n        return (\n          <InputBox\n            key={key}\n            id={key}\n            required={value.required}\n            name={key}\n            label={value.label}\n            tooltip={value.tooltip}\n            error={value.hasError(fields[key], editMode)}\n            value={fields[key] ? fields[key] : \"\"}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              setFields({ ...fields, [key]: e.target.value })\n            }\n            placeholder={value.placeholder}\n            disabled={!editMode}\n            type={value.type}\n          />\n        );\n    }\n  };\n\n  useEffect(() => {\n    dispatch(setHelpName(\"LDAP\"));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Grid item xs={12}>\n      {resetOpen && (\n        <ResetConfigurationModal\n          configurationName={\"identity_ldap\"}\n          closeResetModalAndRefresh={closeDeleteModalAndRefresh}\n          resetOpen={resetOpen}\n        />\n      )}\n      <PageHeaderWrapper label={\"LDAP\"} actions={<HelpMenu />} />\n      <PageLayout variant={\"constrained\"}>\n        <Tabs\n          horizontal\n          options={[\n            {\n              tabConfig: { id: \"configuration\", label: \"Configuration\" },\n              content: (\n                <Fragment>\n                  <ScreenTitle\n                    icon={null}\n                    title={editMode ? \"Edit Configuration\" : \"\"}\n                    actions={\n                      !editMode ? (\n                        <Fragment>\n                          <Tooltip\n                            tooltip={\n                              envOverride\n                                ? \"Configuration cannot be edited in this module as LDAP environment variables are set for this MinIO instance.\"\n                                : \"\"\n                            }\n                          >\n                            <Button\n                              id={\"edit\"}\n                              type=\"button\"\n                              variant={\"callAction\"}\n                              icon={<EditIcon />}\n                              onClick={toggleEditMode}\n                              label={\"Edit Configuration\"}\n                              disabled={loading || envOverride}\n                            />\n                          </Tooltip>\n                          {hasConfiguration && (\n                            <Tooltip\n                              tooltip={\n                                envOverride\n                                  ? \"Configuration cannot be disabled / enabled in this module as LDAP environment variables are set for this MinIO instance.\"\n                                  : \"\"\n                              }\n                            >\n                              <Button\n                                id={\"is-configuration-enabled\"}\n                                onClick={() => toggleConfiguration(!isEnabled)}\n                                label={\n                                  isEnabled ? \"Disable LDAP\" : \"Enable LDAP\"\n                                }\n                                variant={isEnabled ? \"secondary\" : \"regular\"}\n                                disabled={envOverride}\n                              />\n                            </Tooltip>\n                          )}\n                          <Button\n                            id={\"refresh-idp-config\"}\n                            onClick={() => setLoading(true)}\n                            label={\"Refresh\"}\n                            icon={<RefreshIcon />}\n                          />\n                        </Fragment>\n                      ) : null\n                    }\n                  />\n                  <br />\n                  {loading ? (\n                    <Box\n                      sx={{\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        marginTop: 10,\n                      }}\n                    >\n                      <Loader />\n                    </Box>\n                  ) : (\n                    <Fragment>\n                      {editMode ? (\n                        <Fragment>\n                          <FormLayout\n                            helpBox={\n                              <AddIDPConfigurationHelpBox\n                                helpText={\n                                  \"Learn more about LDAP Configurations\"\n                                }\n                                contents={ldapHelpBoxContents}\n                                docLink={\n                                  \"https://min.io/docs/minio/linux/operations/external-iam.html?ref=con#minio-external-iam-ad-ldap\"\n                                }\n                                docText={\"Learn more about LDAP Configurations\"}\n                              />\n                            }\n                          >\n                            {editMode && hasConfiguration ? (\n                              <Box sx={{ marginBottom: 15 }}>\n                                <HelpBox\n                                  title={\n                                    <Box\n                                      style={{\n                                        display: \"flex\",\n                                        justifyContent: \"space-between\",\n                                        alignItems: \"center\",\n                                        flexGrow: 1,\n                                      }}\n                                    >\n                                      Lookup Bind Password must be re-entered to\n                                      change LDAP configurations\n                                    </Box>\n                                  }\n                                  iconComponent={<WarnIcon />}\n                                  help={null}\n                                />\n                              </Box>\n                            ) : null}\n                            {Object.entries(formFields).map(([key, value]) =>\n                              renderFormField(key, value),\n                            )}\n                            <Box\n                              sx={{\n                                display: \"flex\",\n                                alignItems: \"center\",\n                                justifyContent: \"flex-end\",\n                                marginTop: \"20px\",\n                                gap: \"15px\",\n                              }}\n                            >\n                              {editMode && hasConfiguration && (\n                                <Button\n                                  id={\"clear\"}\n                                  type=\"button\"\n                                  variant=\"secondary\"\n                                  onClick={() => setResetOpen(true)}\n                                  label={\"Reset Configuration\"}\n                                />\n                              )}\n                              <Button\n                                id={\"cancel\"}\n                                type=\"button\"\n                                variant=\"regular\"\n                                onClick={toggleEditMode}\n                                label={\"Cancel\"}\n                              />\n                              <Button\n                                id={\"save-key\"}\n                                type=\"submit\"\n                                variant=\"callAction\"\n                                color=\"primary\"\n                                disabled={loading || !validSave()}\n                                label={\"Save\"}\n                                onClick={saveRecord}\n                              />\n                            </Box>\n                          </FormLayout>\n                        </Fragment>\n                      ) : (\n                        <Fragment>\n                          <Box\n                            sx={{\n                              display: \"grid\",\n                              gridTemplateColumns: \"1fr\",\n                              gridAutoFlow: \"dense\",\n                              gap: 3,\n                              padding: \"15px\",\n                              border: \"1px solid #eaeaea\",\n                              [`@media (min-width: 576px)`]: {\n                                gridTemplateColumns: \"2fr 1fr\",\n                                gridAutoFlow: \"row\",\n                              },\n                            }}\n                          >\n                            <ValuePair\n                              label={\"LDAP Enabled\"}\n                              value={isEnabled ? \"Yes\" : \"No\"}\n                            />\n                            {hasConfiguration && (\n                              <Fragment>\n                                {Object.entries(formFields).map(\n                                  ([key, value]) => {\n                                    if (!value.editOnly) {\n                                      let label: React.ReactNode = value.label;\n                                      let val: React.ReactNode = fields[key]\n                                        ? fields[key]\n                                        : \"\";\n\n                                      if (overrideFields[key]) {\n                                        label = (\n                                          <Box\n                                            sx={{\n                                              display: \"flex\",\n                                              alignItems: \"center\",\n                                              gap: 5,\n                                              \"& .min-icon\": {\n                                                height: 20,\n                                                width: 20,\n                                              },\n                                              \"& span\": {\n                                                height: 20,\n                                                display: \"flex\",\n                                                alignItems: \"center\",\n                                              },\n                                            }}\n                                          >\n                                            <span>{value.label}</span>\n                                            <Tooltip\n                                              tooltip={`This value is set from the ${overrideFields[key]} environment variable`}\n                                              placement={\"right\"}\n                                            >\n                                              <span className={\"muted\"}>\n                                                <ConsoleIcon />\n                                              </span>\n                                            </Tooltip>\n                                          </Box>\n                                        );\n\n                                        val = (\n                                          <i>\n                                            <span className={\"muted\"}>\n                                              {val}\n                                            </span>\n                                          </i>\n                                        );\n                                      }\n                                      return (\n                                        <ValuePair\n                                          key={key}\n                                          label={label}\n                                          value={val}\n                                        />\n                                      );\n                                    }\n                                    return null;\n                                  },\n                                )}\n                              </Fragment>\n                            )}\n                          </Box>\n                        </Fragment>\n                      )}\n                    </Fragment>\n                  )}\n                </Fragment>\n              ),\n            },\n            {\n              tabConfig: {\n                id: \"entities\",\n                label: \"Entities\",\n                disabled: !hasConfiguration || !isEnabled,\n              },\n              content: (\n                <Fragment>\n                  {hasConfiguration && (\n                    <Box>\n                      <LDAPEntitiesQuery />\n                    </Box>\n                  )}\n                </Fragment>\n              ),\n            },\n          ]}\n          currentTabOrPath={curTab}\n          onTabClick={(newTab) => {\n            setCurTab(newTab);\n            setEditMode(false);\n          }}\n        />\n      </PageLayout>\n    </Grid>\n  );\n};\n\nexport default IDPLDAPConfigurationDetails;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { Policy, User } from \"api/consoleApi\";\n\ninterface policyDetailsInterface {\n  policy: string;\n}\n\nexport const usersSort = (a: User, b: User) => {\n  if (a.accessKey && b.accessKey) {\n    if (a.accessKey > b.accessKey) {\n      return 1;\n    }\n    if (a.accessKey < b.accessKey) {\n      return -1;\n    }\n  }\n  // a must be equal to b\n  return 0;\n};\n\nexport const policySort = (a: Policy, b: Policy) => {\n  if (a.name! > b.name!) {\n    return 1;\n  }\n  if (a.name! < b.name!) {\n    return -1;\n  }\n  // a must be equal to b\n  return 0;\n};\n\nexport const stringSort = (a: string, b: string) => {\n  if (a > b) {\n    return 1;\n  }\n  if (a < b) {\n    return -1;\n  }\n  // a must be equal to b\n  return 0;\n};\n\nexport const policyDetailsSort = (\n  a: policyDetailsInterface,\n  b: policyDetailsInterface,\n) => {\n  if (a.policy > b.policy) {\n    return 1;\n  }\n  if (a.policy < b.policy) {\n    return -1;\n  }\n  // a must be equal to b\n  return 0;\n};\n","// This file is part of MinIO Console Server\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport { HelpIconFilled, Box } from \"mds\";\n\ninterface IContent {\n  icon: React.ReactNode;\n  text: string;\n  iconDescription: string;\n}\n\ninterface IAddIDPConfigurationHelpBoxProps {\n  helpText: string;\n  docLink: string;\n  docText: string;\n  contents: IContent[];\n}\n\nconst FeatureItem = ({\n  icon,\n  description,\n}: {\n  icon: any;\n  description: string;\n}) => {\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        \"& .min-icon\": {\n          marginRight: \"10px\",\n          height: \"23px\",\n          width: \"23px\",\n          marginBottom: \"10px\",\n        },\n      }}\n    >\n      {icon}{\" \"}\n      <div style={{ fontSize: \"14px\", fontStyle: \"italic\", color: \"#5E5E5E\" }}>\n        {description}\n      </div>\n    </Box>\n  );\n};\n\nconst AddIDPConfigurationHelpBox = ({\n  helpText,\n  docLink,\n  docText,\n  contents,\n}: IAddIDPConfigurationHelpBoxProps) => {\n  return (\n    <Box\n      sx={{\n        flex: 1,\n        border: \"1px solid #eaeaea\",\n        borderRadius: \"2px\",\n        display: \"flex\",\n        flexFlow: \"column\",\n        padding: \"20px\",\n      }}\n    >\n      <Box\n        sx={{\n          fontSize: \"16px\",\n          fontWeight: 600,\n          display: \"flex\",\n          alignItems: \"center\",\n          marginBottom: \"16px\",\n          paddingBottom: \"20px\",\n\n          \"& .min-icon\": {\n            height: \"21px\",\n            width: \"21px\",\n            marginRight: \"15px\",\n          },\n        }}\n      >\n        <HelpIconFilled />\n        <div>{helpText}</div>\n      </Box>\n      <Box sx={{ fontSize: \"14px\", marginBottom: \"15px\" }}>\n        {contents.map((content, index) => (\n          <Fragment key={`feature-item-${index}`}>\n            {content.icon && (\n              <Box sx={{ paddingBottom: \"20px\" }}>\n                <FeatureItem\n                  icon={content.icon}\n                  description={content.iconDescription}\n                />\n              </Box>\n            )}\n            <Box sx={{ paddingBottom: \"20px\" }}>{content.text}</Box>\n          </Fragment>\n        ))}\n        <Box sx={{ paddingBottom: \"20px\" }}>\n          <a href={docLink} target=\"_blank\" rel=\"noopener\">\n            {docText}\n          </a>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default AddIDPConfigurationHelpBox;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { LockIcon, LoginIcon } from \"mds\";\n\nexport const ldapHelpBoxContents = [\n  {\n    text: \"MinIO supports using an Active Directory or LDAP (AD/LDAP) service for external management of user identities. Configuring an external IDentity Provider (IDP) enables Single-Sign On (SSO) workflows, where applications authenticate against the external IDP before accessing MinIO.\",\n    icon: <LoginIcon />,\n    iconDescription: \"Create Configurations\",\n  },\n  {\n    text: \"MinIO queries the configured Active Directory / LDAP server to verify the credentials specified by the application and optionally return a list of groups in which the user has membership. MinIO supports two modes (Lookup-Bind Mode and Username-Bind Mode) for performing these queries\",\n    icon: null,\n    iconDescription: \"\",\n  },\n  {\n    text: \"MinIO recommends using Lookup-Bind mode as the preferred method for verifying AD/LDAP credentials. Username-Bind mode is a legacy method retained for backwards compatibility only.\",\n    icon: null,\n    iconDescription: \"\",\n  },\n];\n\nexport const openIDHelpBoxContents = [\n  {\n    text: \"MinIO supports using an OpenID Connect (OIDC) compatible IDentity Provider (IDP) such as Okta, KeyCloak, Dex, Google, or Facebook for external management of user identities.\",\n    icon: <LockIcon />,\n    iconDescription: \"Create Configurations\",\n  },\n  {\n    text: \"Configuring an external IDP enables Single-Sign On workflows, where applications authenticate against the external IDP before accessing MinIO.\",\n    icon: null,\n    iconDescription: \"\",\n  },\n];\n\nexport const openIDFormFields = {\n  config_url: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Config URL is required\" : \"\";\n    },\n    label: \"Config URL\",\n    tooltip: \"Config URL for identity provider configuration\",\n    placeholder:\n      \"https://identity-provider-url/.well-known/openid-configuration\",\n    type: \"text\",\n    editOnly: false,\n  },\n  client_id: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Client ID is required\" : \"\";\n    },\n    label: \"Client ID\",\n    tooltip: \"Identity provider Client ID\",\n    placeholder: \"Enter Client ID\",\n    type: \"text\",\n    editOnly: false,\n  },\n  client_secret: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Client Secret is required\" : \"\";\n    },\n    label: \"Client Secret\",\n    tooltip: \"Identity provider Client Secret\",\n    placeholder: \"Enter Client Secret\",\n    type: \"password\",\n    editOnly: true,\n  },\n  claim_name: {\n    required: false,\n    label: \"Claim Name\",\n    tooltip: \"Claim from which MinIO will read the policy or role to use\",\n    placeholder: \"Enter Claim Name\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  display_name: {\n    required: false,\n    label: \"Display Name\",\n    tooltip: \"\",\n    placeholder: \"Enter Display Name\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  claim_prefix: {\n    required: false,\n    label: \"Claim Prefix\",\n    tooltip: \"\",\n    placeholder: \"Enter Claim Prefix\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  scopes: {\n    required: false,\n    label: \"Scopes\",\n    tooltip: \"\",\n    placeholder: \"openid,profile,email\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  redirect_uri: {\n    required: false,\n    label: \"Redirect URI\",\n    tooltip: \"\",\n    placeholder: \"https://console-endpoint-url/oauth_callback\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  role_policy: {\n    required: false,\n    label: \"Role Policy\",\n    tooltip: \"\",\n    placeholder: \"readonly\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  claim_userinfo: {\n    required: false,\n    label: \"Claim User Info\",\n    tooltip: \"\",\n    placeholder: \"Claim User Info\",\n    type: \"toggle\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  redirect_uri_dynamic: {\n    required: false,\n    label: \"Redirect URI Dynamic\",\n    tooltip: \"\",\n    placeholder: \"Redirect URI Dynamic\",\n    type: \"toggle\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n};\n\nexport const ldapFormFields = {\n  server_insecure: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Server Address is required\" : \"\";\n    },\n    label: \"Server Insecure\",\n    tooltip: \"Disable SSL certificate verification \",\n    placeholder: \"myldapserver.com:636\",\n    type: \"toggle\",\n    editOnly: false,\n  },\n  server_addr: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Server Address is required\" : \"\";\n    },\n    label: \"Server Address\",\n    tooltip: 'AD/LDAP server address e.g. \"myldapserver.com:636\"',\n    placeholder: \"myldapserver.com:636\",\n    type: \"text\",\n    editOnly: false,\n  },\n  lookup_bind_dn: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Lookup Bind DN is required\" : \"\";\n    },\n    label: \"Lookup Bind DN\",\n    tooltip:\n      \"DN (Distinguished Name) for LDAP read-only service account used to perform DN and group lookups\",\n    placeholder: \"cn=admin,dc=min,dc=io\",\n    type: \"text\",\n    editOnly: false,\n  },\n  lookup_bind_password: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Lookup Bind Password is required\" : \"\";\n    },\n    label: \"Lookup Bind Password\",\n    tooltip:\n      \"Password for LDAP read-only service account used to perform DN and group lookups\",\n    placeholder: \"admin\",\n    type: \"password\",\n    editOnly: true,\n  },\n  user_dn_search_base_dn: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"User DN Search Base DN is required\" : \"\";\n    },\n    label: \"User DN Search Base\",\n    tooltip: \"\",\n    placeholder: \"DC=example,DC=net\",\n    type: \"text\",\n    editOnly: false,\n  },\n  user_dn_search_filter: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"User DN Search Filter is required\" : \"\";\n    },\n    label: \"User DN Search Filter\",\n    tooltip: \"\",\n    placeholder: \"(sAMAccountName=%s)\",\n    type: \"text\",\n    editOnly: false,\n  },\n  group_search_base_dn: {\n    required: false,\n    hasError: (s: string, editMode: boolean) => \"\",\n    label: \"Group Search Base DN\",\n    tooltip: \"\",\n    placeholder: \"ou=swengg,dc=min,dc=io\",\n    type: \"text\",\n    editOnly: false,\n  },\n  group_search_filter: {\n    required: false,\n    hasError: (s: string, editMode: boolean) => \"\",\n    label: \"Group Search Filter\",\n    tooltip: \"\",\n    placeholder: \"(&(objectclass=groupofnames)(member=%d))\",\n    type: \"text\",\n    editOnly: false,\n  },\n};\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\n\nimport { Box, DataTable, Grid, ProgressBar } from \"mds\";\nimport { policySort } from \"../../../utils/sortFunctions\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport SearchBox from \"../Common/SearchBox\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\nimport { useSelector } from \"react-redux\";\nimport { api } from \"../../../api\";\n\ninterface ISelectPolicyProps {\n  selectedPolicy?: string[];\n  noTitle?: boolean;\n}\n\nconst PolicySelectors = ({ noTitle = false }: ISelectPolicyProps) => {\n  const dispatch = useAppDispatch();\n  // Local State\n  const [records, setRecords] = useState<any[]>([]);\n  const [loading, isLoading] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string>(\"\");\n\n  const currentPolicies = useSelector(\n    (state: AppState) => state.createUser.selectedPolicies,\n  );\n\n  const fetchPolicies = useCallback(() => {\n    isLoading(true);\n\n    api.policies\n      .listPolicies()\n      .then((res) => {\n        const policies = res.data.policies ?? [];\n        isLoading(false);\n        setRecords(policies.sort(policySort));\n      })\n      .catch((err: ErrorResponseHandler) => {\n        isLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  }, [dispatch]);\n\n  //Effects\n  useEffect(() => {\n    isLoading(true);\n  }, []);\n\n  useEffect(() => {\n    if (loading) {\n      fetchPolicies();\n    }\n  }, [loading, fetchPolicies]);\n\n  const selectionChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const targetD = e.target;\n    const value = targetD.value;\n    const checked = targetD.checked;\n\n    let elements: string[] = [...currentPolicies]; // We clone the checkedUsers array\n\n    if (checked) {\n      // If the user has checked this field we need to push this to checkedUsersList\n      elements.push(value);\n    } else {\n      // User has unchecked this field, we need to remove it from the list\n      elements = elements.filter((element) => element !== value);\n    }\n    // remove empty values\n    elements = elements.filter((element) => element !== \"\");\n\n    dispatch(setSelectedPolicies(elements));\n  };\n\n  const filteredRecords = records.filter((elementItem) =>\n    elementItem.name.includes(filter),\n  );\n\n  return (\n    <Grid item xs={12} className={\"inputItem\"}>\n      {loading && <ProgressBar />}\n      {records.length > 0 ? (\n        <Fragment>\n          <Grid item xs={12} className={\"inputItem\"}>\n            <SearchBox\n              placeholder=\"Start typing to search for a Policy\"\n              onChange={(value) => {\n                setFilter(value);\n              }}\n              value={filter}\n              label={!noTitle ? \"Assign Policies\" : \"\"}\n            />\n          </Grid>\n\n          <DataTable\n            columns={[{ label: \"Policy\", elementKey: \"name\" }]}\n            onSelect={selectionChanged}\n            selectedItems={currentPolicies}\n            isLoading={loading}\n            records={filteredRecords}\n            entityName=\"Policies\"\n            idField=\"name\"\n            customPaperHeight={\"200px\"}\n          />\n        </Fragment>\n      ) : (\n        <Box\n          sx={{\n            textAlign: \"center\",\n            padding: \"10px 0\",\n          }}\n        >\n          No Policies Available\n        </Box>\n      )}\n    </Grid>\n  );\n};\n\nexport default PolicySelectors;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\n\nimport { ConfirmDeleteIcon, ProgressBar } from \"mds\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\n\ninterface IResetConfiguration {\n  configurationName: string;\n  closeResetModalAndRefresh: (reloadConfiguration: boolean) => void;\n  resetOpen: boolean;\n}\n\nconst ResetConfigurationModal = ({\n  configurationName,\n  closeResetModalAndRefresh,\n  resetOpen,\n}: IResetConfiguration) => {\n  const dispatch = useAppDispatch();\n  const [resetLoading, setResetLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (resetLoading) {\n      api.configs\n        .resetConfig(configurationName)\n        .then(() => {\n          setResetLoading(false);\n          closeResetModalAndRefresh(true);\n        })\n        .catch((err) => {\n          setResetLoading(false);\n          dispatch(setErrorSnackMessage(errorToHandler(err.error)));\n        });\n    }\n  }, [closeResetModalAndRefresh, configurationName, resetLoading, dispatch]);\n\n  const resetConfiguration = () => {\n    setResetLoading(true);\n  };\n\n  return (\n    <ConfirmDialog\n      title={`Restore Defaults`}\n      confirmText={\"Yes, Reset Configuration\"}\n      isOpen={resetOpen}\n      titleIcon={<ConfirmDeleteIcon />}\n      isLoading={resetLoading}\n      onConfirm={resetConfiguration}\n      onClose={() => {\n        closeResetModalAndRefresh(false);\n      }}\n      confirmationContent={\n        <Fragment>\n          {resetLoading && <ProgressBar />}\n          <Fragment>\n            Are you sure you want to restore these configurations to default\n            values?\n            <br />\n            <b\n              style={{\n                maxWidth: \"200px\",\n                whiteSpace: \"normal\",\n                wordWrap: \"break-word\",\n              }}\n            >\n              Please note that this may cause your system to not be accessible\n            </b>\n          </Fragment>\n        </Fragment>\n      }\n    />\n  );\n};\n\nexport default ResetConfigurationModal;\n"],"names":["EntityResultTitle","_ref","name","_jsxs","children","_jsx","CollapseCaret","style","transform","EntityResultItems","_ref2","blockName","results","Fragment","map","res","index","concat","_ref3","_results$groups","_results$policies","_results$users","_results$groups2","_results$users2","_results$policies2","entityName","entityLength","groups","length","policies","users","Box","className","sx","marginTop","SectionTitle","separator","fontSize","icon","GroupsMenuIcon","width","height","actions","h4","borderBottom","padding","margin","marginBottom","display","alignItems","marginRight","fill","groupData","group","user","policy","LDAPEntitiesQuery","dispatch","useAppDispatch","loading","setLoading","useState","setUsers","setGroups","setResults","selectedPolicies","useSelector","state","createUser","paddingTop","Grid","container","item","sm","md","lg","flexDirection","gap","withBorders","overflowY","minHeight","maxHeight","userDat","InputBox","id","value","onChange","e","usersElements","target","overlayIcon","AddIcon","RemoveIcon","overlayAction","alterUsersList","addItem","alterUsers","filteredUsers","filter","_","indx","groupDat","groupsElements","alterGroupsList","alterGroups","filteredGroups","PolicySelectors","selectedPolicy","noTitle","textAlign","Loader","timestamp","TimeIcon","DateTime","fromISO","toFormat","backgroundColor","flexGrow","LDAPResultsBlock","xs","justifyContent","Button","type","variant","onClick","searchEntities","data","cleanPolicies","pol","cleanUsers","usr","cleanGroups","grp","api","ldapEntities","getLdapEntities","then","result","catch","err","setErrorSnackMessage","errorToHandler","error","SearchIcon","enabledConfigLDAP","IDPLDAPConfigurationDetails","formFields","ldapFormFields","isEnabled","setIsEnabled","hasConfiguration","setHasConfiguration","fields","setFields","overrideFields","setOverrideFields","record","setRecord","undefined","editMode","setEditMode","resetOpen","setResetOpen","curTab","setCurTab","envOverride","setEnvOverride","toggleEditMode","parseFields","ovrFlds","enabled","find","key","totalCoincidences","totalOverride","forEach","env_override","includes","hasConfig","useEffect","configs","configInfo","key_values","setHelpName","ResetConfigurationModal","configurationName","closeResetModalAndRefresh","async","refresh","setServerNeedsRestart","PageHeaderWrapper","label","HelpMenu","PageLayout","Tabs","horizontal","options","tabConfig","content","ScreenTitle","title","Tooltip","tooltip","EditIcon","disabled","payload","setConfig","restart","setSnackBarMessage","toggleConfiguration","RefreshIcon","FormLayout","helpBox","AddIDPConfigurationHelpBox","helpText","contents","ldapHelpBoxContents","docLink","docText","HelpBox","iconComponent","WarnIcon","help","Object","entries","renderFormField","Switch","indicatorLabels","checked","_objectSpread","description","required","hasError","placeholder","color","validSave","saveRecord","keyVals","keys","lookup_bind_password","gridTemplateColumns","gridAutoFlow","border","ValuePair","editOnly","val","placement","ConsoleIcon","currentTabOrPath","onTabClick","newTab","usersSort","a","b","accessKey","policySort","stringSort","policyDetailsSort","FeatureItem","fontStyle","flex","borderRadius","flexFlow","fontWeight","paddingBottom","HelpIconFilled","iconDescription","text","href","rel","LoginIcon","openIDHelpBoxContents","LockIcon","openIDFormFields","config_url","s","client_id","client_secret","claim_name","display_name","claim_prefix","scopes","redirect_uri","role_policy","claim_userinfo","redirect_uri_dynamic","server_insecure","server_addr","lookup_bind_dn","user_dn_search_base_dn","user_dn_search_filter","group_search_base_dn","group_search_filter","records","setRecords","isLoading","setFilter","currentPolicies","fetchPolicies","useCallback","listPolicies","_res$data$policies","sort","setModalErrorSnackMessage","filteredRecords","elementItem","ProgressBar","SearchBox","DataTable","columns","elementKey","onSelect","targetD","elements","push","element","setSelectedPolicies","selectedItems","idField","customPaperHeight","resetLoading","setResetLoading","resetConfig","ConfirmDialog","confirmText","isOpen","titleIcon","ConfirmDeleteIcon","onConfirm","resetConfiguration","onClose","confirmationContent","maxWidth","whiteSpace","wordWrap"],"sourceRoot":""}